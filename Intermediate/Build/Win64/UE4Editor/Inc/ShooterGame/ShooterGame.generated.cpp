// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Public/ShooterGame.h"
#include "ShooterGame.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeShooterGame() {}
	void UBTDecorator_HasLoSTo::StaticRegisterNativesUBTDecorator_HasLoSTo()
	{
	}
	IMPLEMENT_CLASS(UBTDecorator_HasLoSTo, 2693323653);
	void UBTTask_FindPickup::StaticRegisterNativesUBTTask_FindPickup()
	{
	}
	IMPLEMENT_CLASS(UBTTask_FindPickup, 4022081608);
	void UBTTask_FindPointNearEnemy::StaticRegisterNativesUBTTask_FindPointNearEnemy()
	{
	}
	IMPLEMENT_CLASS(UBTTask_FindPointNearEnemy, 330389762);
	void AShooterAIController::StaticRegisterNativesAShooterAIController()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterAIController::StaticClass(),"FindClosestEnemy",(Native)&AShooterAIController::execFindClosestEnemy);
		FNativeFunctionRegistrar::RegisterFunction(AShooterAIController::StaticClass(),"FindClosestEnemyWithLOS",(Native)&AShooterAIController::execFindClosestEnemyWithLOS);
		FNativeFunctionRegistrar::RegisterFunction(AShooterAIController::StaticClass(),"ShootEnemy",(Native)&AShooterAIController::execShootEnemy);
	}
	IMPLEMENT_CLASS(AShooterAIController, 1466644178);
static class UEnum* EShooterPhysMaterialType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UEnum* Z_Construct_UEnum_ShooterGame_EShooterPhysMaterialType();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticEnum(Z_Construct_UEnum_ShooterGame_EShooterPhysMaterialType, Z_Construct_UPackage_ShooterGame(), TEXT("EShooterPhysMaterialType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EShooterPhysMaterialType(EShooterPhysMaterialType_StaticEnum, TEXT("/Script/ShooterGame"));
class UScriptStruct* FTakeHitInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FTakeHitInfo();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FTakeHitInfo_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FTakeHitInfo, Z_Construct_UPackage_ShooterGame(), TEXT("TakeHitInfo"), sizeof(FTakeHitInfo), Get_Z_Construct_UScriptStruct_FTakeHitInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FTakeHitInfo(FTakeHitInfo::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFTakeHitInfo
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFTakeHitInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("TakeHitInfo")),new UScriptStruct::TCppStructOps<FTakeHitInfo>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFTakeHitInfo;
class UScriptStruct* FDecalData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FDecalData();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FDecalData_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FDecalData, Z_Construct_UPackage_ShooterGame(), TEXT("DecalData"), sizeof(FDecalData), Get_Z_Construct_UScriptStruct_FDecalData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FDecalData(FDecalData::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFDecalData
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFDecalData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("DecalData")),new UScriptStruct::TCppStructOps<FDecalData>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFDecalData;
	void AShooterCharacter::ServerEquipWeapon(AShooterWeapon* NewWeapon)
	{
		ShooterCharacter_eventServerEquipWeapon_Parms Parms;
		Parms.NewWeapon=NewWeapon;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerEquipWeapon),&Parms);
	}
	void AShooterCharacter::ServerSetRunning(bool bNewRunning, bool bToggle)
	{
		ShooterCharacter_eventServerSetRunning_Parms Parms;
		Parms.bNewRunning=bNewRunning ? true : false;
		Parms.bToggle=bToggle ? true : false;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerSetRunning),&Parms);
	}
	void AShooterCharacter::ServerSetTargeting(bool bNewTargeting)
	{
		ShooterCharacter_eventServerSetTargeting_Parms Parms;
		Parms.bNewTargeting=bNewTargeting ? true : false;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerSetTargeting),&Parms);
	}
	void AShooterCharacter::StaticRegisterNativesAShooterCharacter()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"GetAimOffsets",(Native)&AShooterCharacter::execGetAimOffsets);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"GetRunningSpeedModifier",(Native)&AShooterCharacter::execGetRunningSpeedModifier);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"GetTargetingSpeedModifier",(Native)&AShooterCharacter::execGetTargetingSpeedModifier);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"GetWeapon",(Native)&AShooterCharacter::execGetWeapon);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"IsFiring",(Native)&AShooterCharacter::execIsFiring);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"IsFirstPerson",(Native)&AShooterCharacter::execIsFirstPerson);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"IsRunning",(Native)&AShooterCharacter::execIsRunning);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"IsTargeting",(Native)&AShooterCharacter::execIsTargeting);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"OnRep_CurrentWeapon",(Native)&AShooterCharacter::execOnRep_CurrentWeapon);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"OnRep_LastTakeHitInfo",(Native)&AShooterCharacter::execOnRep_LastTakeHitInfo);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"ServerEquipWeapon",(Native)&AShooterCharacter::execServerEquipWeapon);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"ServerSetRunning",(Native)&AShooterCharacter::execServerSetRunning);
		FNativeFunctionRegistrar::RegisterFunction(AShooterCharacter::StaticClass(),"ServerSetTargeting",(Native)&AShooterCharacter::execServerSetTargeting);
	}
	IMPLEMENT_CLASS(AShooterCharacter, 1423121716);
	void AShooterBot::StaticRegisterNativesAShooterBot()
	{
	}
	IMPLEMENT_CLASS(AShooterBot, 1939405039);
	void UShooterCharacterMovement::StaticRegisterNativesUShooterCharacterMovement()
	{
	}
	IMPLEMENT_CLASS(UShooterCharacterMovement, 2900888116);
class UScriptStruct* FShooterChatStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterChatStyle();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FShooterChatStyle_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FShooterChatStyle, Z_Construct_UPackage_ShooterGame(), TEXT("ShooterChatStyle"), sizeof(FShooterChatStyle), Get_Z_Construct_UScriptStruct_FShooterChatStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FShooterChatStyle(FShooterChatStyle::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFShooterChatStyle
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFShooterChatStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ShooterChatStyle")),new UScriptStruct::TCppStructOps<FShooterChatStyle>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFShooterChatStyle;
	void UShooterChatWidgetStyle::StaticRegisterNativesUShooterChatWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UShooterChatWidgetStyle, 641108725);
	void UShooterCheatManager::StaticRegisterNativesUShooterCheatManager()
	{
		FNativeFunctionRegistrar::RegisterFunction(UShooterCheatManager::StaticClass(),"ChangeTeam",(Native)&UShooterCheatManager::execChangeTeam);
		FNativeFunctionRegistrar::RegisterFunction(UShooterCheatManager::StaticClass(),"Cheat",(Native)&UShooterCheatManager::execCheat);
		FNativeFunctionRegistrar::RegisterFunction(UShooterCheatManager::StaticClass(),"ForceMatchStart",(Native)&UShooterCheatManager::execForceMatchStart);
		FNativeFunctionRegistrar::RegisterFunction(UShooterCheatManager::StaticClass(),"SpawnBot",(Native)&UShooterCheatManager::execSpawnBot);
		FNativeFunctionRegistrar::RegisterFunction(UShooterCheatManager::StaticClass(),"ToggleInfiniteAmmo",(Native)&UShooterCheatManager::execToggleInfiniteAmmo);
		FNativeFunctionRegistrar::RegisterFunction(UShooterCheatManager::StaticClass(),"ToggleInfiniteClip",(Native)&UShooterCheatManager::execToggleInfiniteClip);
		FNativeFunctionRegistrar::RegisterFunction(UShooterCheatManager::StaticClass(),"ToggleMatchTimer",(Native)&UShooterCheatManager::execToggleMatchTimer);
	}
	IMPLEMENT_CLASS(UShooterCheatManager, 1000413790);
	void UShooterDamageType::StaticRegisterNativesUShooterDamageType()
	{
	}
	IMPLEMENT_CLASS(UShooterDamageType, 4279856783);
	void AShooterDemoSpectator::StaticRegisterNativesAShooterDemoSpectator()
	{
	}
	IMPLEMENT_CLASS(AShooterDemoSpectator, 2205395636);
	void UShooterEngine::StaticRegisterNativesUShooterEngine()
	{
	}
	IMPLEMENT_CLASS(UShooterEngine, 655494049);
	void AShooterExplosionEffect::StaticRegisterNativesAShooterExplosionEffect()
	{
	}
	IMPLEMENT_CLASS(AShooterExplosionEffect, 34518848);
	void AShooterGame_Menu::StaticRegisterNativesAShooterGame_Menu()
	{
	}
	IMPLEMENT_CLASS(AShooterGame_Menu, 865929657);
	void UShooterGameInstance::StaticRegisterNativesUShooterGameInstance()
	{
	}
	IMPLEMENT_CLASS(UShooterGameInstance, 1289690818);
	void AShooterGameMode::StaticRegisterNativesAShooterGameMode()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterGameMode::StaticClass(),"FinishMatch",(Native)&AShooterGameMode::execFinishMatch);
		FNativeFunctionRegistrar::RegisterFunction(AShooterGameMode::StaticClass(),"SetAllowBots",(Native)&AShooterGameMode::execSetAllowBots);
	}
	IMPLEMENT_CLASS(AShooterGameMode, 1325170756);
	void AShooterGame_FreeForAll::StaticRegisterNativesAShooterGame_FreeForAll()
	{
	}
	IMPLEMENT_CLASS(AShooterGame_FreeForAll, 398496633);
	void AShooterGame_TeamDeathMatch::StaticRegisterNativesAShooterGame_TeamDeathMatch()
	{
	}
	IMPLEMENT_CLASS(AShooterGame_TeamDeathMatch, 3088323118);
	void AShooterGameSession::StaticRegisterNativesAShooterGameSession()
	{
	}
	IMPLEMENT_CLASS(AShooterGameSession, 774887420);
	void AShooterGameState::StaticRegisterNativesAShooterGameState()
	{
	}
	IMPLEMENT_CLASS(AShooterGameState, 286881948);
	void UShooterGameUserSettings::StaticRegisterNativesUShooterGameUserSettings()
	{
	}
	IMPLEMENT_CLASS(UShooterGameUserSettings, 647349326);
	void UShooterGameViewportClient::StaticRegisterNativesUShooterGameViewportClient()
	{
	}
	IMPLEMENT_CLASS(UShooterGameViewportClient, 2199067049);
	void AShooterHUD::StaticRegisterNativesAShooterHUD()
	{
	}
	IMPLEMENT_CLASS(AShooterHUD, 3833748388);
	void AShooterImpactEffect::StaticRegisterNativesAShooterImpactEffect()
	{
	}
	IMPLEMENT_CLASS(AShooterImpactEffect, 4248172015);
	void UShooterPersistentUser::StaticRegisterNativesUShooterPersistentUser()
	{
	}
	IMPLEMENT_CLASS(UShooterPersistentUser, 2357149112);
	void UShooterLocalPlayer::StaticRegisterNativesUShooterLocalPlayer()
	{
	}
	IMPLEMENT_CLASS(UShooterLocalPlayer, 2355777673);
class UScriptStruct* FShooterMenuItemStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuItemStyle();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FShooterMenuItemStyle_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FShooterMenuItemStyle, Z_Construct_UPackage_ShooterGame(), TEXT("ShooterMenuItemStyle"), sizeof(FShooterMenuItemStyle), Get_Z_Construct_UScriptStruct_FShooterMenuItemStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FShooterMenuItemStyle(FShooterMenuItemStyle::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuItemStyle
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuItemStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ShooterMenuItemStyle")),new UScriptStruct::TCppStructOps<FShooterMenuItemStyle>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuItemStyle;
	void UShooterMenuItemWidgetStyle::StaticRegisterNativesUShooterMenuItemWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UShooterMenuItemWidgetStyle, 2887513702);
class UScriptStruct* FShooterMenuSoundsStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuSoundsStyle();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FShooterMenuSoundsStyle_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FShooterMenuSoundsStyle, Z_Construct_UPackage_ShooterGame(), TEXT("ShooterMenuSoundsStyle"), sizeof(FShooterMenuSoundsStyle), Get_Z_Construct_UScriptStruct_FShooterMenuSoundsStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FShooterMenuSoundsStyle(FShooterMenuSoundsStyle::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuSoundsStyle
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuSoundsStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ShooterMenuSoundsStyle")),new UScriptStruct::TCppStructOps<FShooterMenuSoundsStyle>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuSoundsStyle;
	void UShooterMenuSoundsWidgetStyle::StaticRegisterNativesUShooterMenuSoundsWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UShooterMenuSoundsWidgetStyle, 3551946363);
class UScriptStruct* FShooterMenuStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuStyle();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FShooterMenuStyle_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FShooterMenuStyle, Z_Construct_UPackage_ShooterGame(), TEXT("ShooterMenuStyle"), sizeof(FShooterMenuStyle), Get_Z_Construct_UScriptStruct_FShooterMenuStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FShooterMenuStyle(FShooterMenuStyle::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuStyle
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ShooterMenuStyle")),new UScriptStruct::TCppStructOps<FShooterMenuStyle>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFShooterMenuStyle;
	void UShooterMenuWidgetStyle::StaticRegisterNativesUShooterMenuWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UShooterMenuWidgetStyle, 1024284139);
class UScriptStruct* FShooterOptionsStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterOptionsStyle();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FShooterOptionsStyle_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FShooterOptionsStyle, Z_Construct_UPackage_ShooterGame(), TEXT("ShooterOptionsStyle"), sizeof(FShooterOptionsStyle), Get_Z_Construct_UScriptStruct_FShooterOptionsStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FShooterOptionsStyle(FShooterOptionsStyle::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFShooterOptionsStyle
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFShooterOptionsStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ShooterOptionsStyle")),new UScriptStruct::TCppStructOps<FShooterOptionsStyle>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFShooterOptionsStyle;
	void UShooterOptionsWidgetStyle::StaticRegisterNativesUShooterOptionsWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UShooterOptionsWidgetStyle, 1716527910);
	void AShooterPickup::OnPickedUpEvent()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_OnPickedUpEvent),NULL);
	}
	void AShooterPickup::OnRespawnEvent()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_OnRespawnEvent),NULL);
	}
	void AShooterPickup::StaticRegisterNativesAShooterPickup()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterPickup::StaticClass(),"OnRep_IsActive",(Native)&AShooterPickup::execOnRep_IsActive);
	}
	IMPLEMENT_CLASS(AShooterPickup, 71455029);
	void AShooterPickup_Ammo::StaticRegisterNativesAShooterPickup_Ammo()
	{
	}
	IMPLEMENT_CLASS(AShooterPickup_Ammo, 416337430);
	void AShooterPickup_Health::StaticRegisterNativesAShooterPickup_Health()
	{
	}
	IMPLEMENT_CLASS(AShooterPickup_Health, 3883744015);
	void AShooterPlayerCameraManager::StaticRegisterNativesAShooterPlayerCameraManager()
	{
	}
	IMPLEMENT_CLASS(AShooterPlayerCameraManager, 507711390);
	void AShooterPlayerController::ClientEndOnlineGame()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ClientEndOnlineGame),NULL);
	}
	void AShooterPlayerController::ClientGameStarted()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ClientGameStarted),NULL);
	}
	void AShooterPlayerController::ClientSendRoundEndEvent(bool bIsWinner, int32 ExpendedTimeInSeconds)
	{
		ShooterPlayerController_eventClientSendRoundEndEvent_Parms Parms;
		Parms.bIsWinner=bIsWinner ? true : false;
		Parms.ExpendedTimeInSeconds=ExpendedTimeInSeconds;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ClientSendRoundEndEvent),&Parms);
	}
	void AShooterPlayerController::ClientSetSpectatorCamera(FVector CameraLocation, FRotator CameraRotation)
	{
		ShooterPlayerController_eventClientSetSpectatorCamera_Parms Parms;
		Parms.CameraLocation=CameraLocation;
		Parms.CameraRotation=CameraRotation;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ClientSetSpectatorCamera),&Parms);
	}
	void AShooterPlayerController::ClientStartOnlineGame()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ClientStartOnlineGame),NULL);
	}
	void AShooterPlayerController::ServerCheat(const FString& Msg)
	{
		ShooterPlayerController_eventServerCheat_Parms Parms;
		Parms.Msg=Msg;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerCheat),&Parms);
	}
	void AShooterPlayerController::ServerSay(const FString& Msg)
	{
		ShooterPlayerController_eventServerSay_Parms Parms;
		Parms.Msg=Msg;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerSay),&Parms);
	}
	void AShooterPlayerController::ServerSuicide()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerSuicide),NULL);
	}
	void AShooterPlayerController::StaticRegisterNativesAShooterPlayerController()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"ClientEndOnlineGame",(Native)&AShooterPlayerController::execClientEndOnlineGame);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"ClientGameStarted",(Native)&AShooterPlayerController::execClientGameStarted);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"ClientSendRoundEndEvent",(Native)&AShooterPlayerController::execClientSendRoundEndEvent);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"ClientSetSpectatorCamera",(Native)&AShooterPlayerController::execClientSetSpectatorCamera);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"ClientStartOnlineGame",(Native)&AShooterPlayerController::execClientStartOnlineGame);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"Say",(Native)&AShooterPlayerController::execSay);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"ServerCheat",(Native)&AShooterPlayerController::execServerCheat);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"ServerSay",(Native)&AShooterPlayerController::execServerSay);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"ServerSuicide",(Native)&AShooterPlayerController::execServerSuicide);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"SetGodMode",(Native)&AShooterPlayerController::execSetGodMode);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"SimulateInputKey",(Native)&AShooterPlayerController::execSimulateInputKey);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerController::StaticClass(),"Suicide",(Native)&AShooterPlayerController::execSuicide);
	}
	IMPLEMENT_CLASS(AShooterPlayerController, 3964645046);
	void AShooterPlayerController_Menu::StaticRegisterNativesAShooterPlayerController_Menu()
	{
	}
	IMPLEMENT_CLASS(AShooterPlayerController_Menu, 1834509158);
	void AShooterPlayerState::BroadcastDeath(AShooterPlayerState* KillerPlayerState, const UDamageType* KillerDamageType, AShooterPlayerState* KilledPlayerState)
	{
		ShooterPlayerState_eventBroadcastDeath_Parms Parms;
		Parms.KillerPlayerState=KillerPlayerState;
		Parms.KillerDamageType=KillerDamageType;
		Parms.KilledPlayerState=KilledPlayerState;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_BroadcastDeath),&Parms);
	}
	void AShooterPlayerState::InformAboutKill(AShooterPlayerState* KillerPlayerState, const UDamageType* KillerDamageType, AShooterPlayerState* KilledPlayerState)
	{
		ShooterPlayerState_eventInformAboutKill_Parms Parms;
		Parms.KillerPlayerState=KillerPlayerState;
		Parms.KillerDamageType=KillerDamageType;
		Parms.KilledPlayerState=KilledPlayerState;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_InformAboutKill),&Parms);
	}
	void AShooterPlayerState::StaticRegisterNativesAShooterPlayerState()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerState::StaticClass(),"BroadcastDeath",(Native)&AShooterPlayerState::execBroadcastDeath);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerState::StaticClass(),"InformAboutKill",(Native)&AShooterPlayerState::execInformAboutKill);
		FNativeFunctionRegistrar::RegisterFunction(AShooterPlayerState::StaticClass(),"OnRep_TeamColor",(Native)&AShooterPlayerState::execOnRep_TeamColor);
	}
	IMPLEMENT_CLASS(AShooterPlayerState, 3925019737);
class UScriptStruct* FWeaponAnim::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FWeaponAnim();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FWeaponAnim_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FWeaponAnim, Z_Construct_UPackage_ShooterGame(), TEXT("WeaponAnim"), sizeof(FWeaponAnim), Get_Z_Construct_UScriptStruct_FWeaponAnim_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWeaponAnim(FWeaponAnim::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFWeaponAnim
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFWeaponAnim()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("WeaponAnim")),new UScriptStruct::TCppStructOps<FWeaponAnim>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFWeaponAnim;
class UScriptStruct* FWeaponData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FWeaponData();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FWeaponData_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FWeaponData, Z_Construct_UPackage_ShooterGame(), TEXT("WeaponData"), sizeof(FWeaponData), Get_Z_Construct_UScriptStruct_FWeaponData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FWeaponData(FWeaponData::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFWeaponData
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFWeaponData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("WeaponData")),new UScriptStruct::TCppStructOps<FWeaponData>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFWeaponData;
	void AShooterWeapon::ClientStartReload()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ClientStartReload),NULL);
	}
	void AShooterWeapon::ServerHandleFiring()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerHandleFiring),NULL);
	}
	void AShooterWeapon::ServerStartFire()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerStartFire),NULL);
	}
	void AShooterWeapon::ServerStartReload()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerStartReload),NULL);
	}
	void AShooterWeapon::ServerStopFire()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerStopFire),NULL);
	}
	void AShooterWeapon::ServerStopReload()
	{
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerStopReload),NULL);
	}
	void AShooterWeapon::StaticRegisterNativesAShooterWeapon()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"ClientStartReload",(Native)&AShooterWeapon::execClientStartReload);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"GetPawnOwner",(Native)&AShooterWeapon::execGetPawnOwner);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"OnRep_BurstCounter",(Native)&AShooterWeapon::execOnRep_BurstCounter);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"OnRep_MyPawn",(Native)&AShooterWeapon::execOnRep_MyPawn);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"OnRep_Reload",(Native)&AShooterWeapon::execOnRep_Reload);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"ServerHandleFiring",(Native)&AShooterWeapon::execServerHandleFiring);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"ServerStartFire",(Native)&AShooterWeapon::execServerStartFire);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"ServerStartReload",(Native)&AShooterWeapon::execServerStartReload);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"ServerStopFire",(Native)&AShooterWeapon::execServerStopFire);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon::StaticClass(),"ServerStopReload",(Native)&AShooterWeapon::execServerStopReload);
	}
	IMPLEMENT_CLASS(AShooterWeapon, 617333242);
class UScriptStruct* FProjectileWeaponData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FProjectileWeaponData();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FProjectileWeaponData_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FProjectileWeaponData, Z_Construct_UPackage_ShooterGame(), TEXT("ProjectileWeaponData"), sizeof(FProjectileWeaponData), Get_Z_Construct_UScriptStruct_FProjectileWeaponData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FProjectileWeaponData(FProjectileWeaponData::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFProjectileWeaponData
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFProjectileWeaponData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ProjectileWeaponData")),new UScriptStruct::TCppStructOps<FProjectileWeaponData>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFProjectileWeaponData;
	void AShooterWeapon_Projectile::ServerFireProjectile(FVector Origin, FVector_NetQuantizeNormal ShootDir)
	{
		ShooterWeapon_Projectile_eventServerFireProjectile_Parms Parms;
		Parms.Origin=Origin;
		Parms.ShootDir=ShootDir;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerFireProjectile),&Parms);
	}
	void AShooterWeapon_Projectile::StaticRegisterNativesAShooterWeapon_Projectile()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon_Projectile::StaticClass(),"ServerFireProjectile",(Native)&AShooterWeapon_Projectile::execServerFireProjectile);
	}
	IMPLEMENT_CLASS(AShooterWeapon_Projectile, 2472129463);
	void AShooterProjectile::StaticRegisterNativesAShooterProjectile()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterProjectile::StaticClass(),"OnImpact",(Native)&AShooterProjectile::execOnImpact);
		FNativeFunctionRegistrar::RegisterFunction(AShooterProjectile::StaticClass(),"OnRep_Exploded",(Native)&AShooterProjectile::execOnRep_Exploded);
	}
	IMPLEMENT_CLASS(AShooterProjectile, 887565726);
class UScriptStruct* FShooterScoreboardStyle::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterScoreboardStyle();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FShooterScoreboardStyle_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FShooterScoreboardStyle, Z_Construct_UPackage_ShooterGame(), TEXT("ShooterScoreboardStyle"), sizeof(FShooterScoreboardStyle), Get_Z_Construct_UScriptStruct_FShooterScoreboardStyle_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FShooterScoreboardStyle(FShooterScoreboardStyle::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFShooterScoreboardStyle
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFShooterScoreboardStyle()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("ShooterScoreboardStyle")),new UScriptStruct::TCppStructOps<FShooterScoreboardStyle>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFShooterScoreboardStyle;
	void UShooterScoreboardWidgetStyle::StaticRegisterNativesUShooterScoreboardWidgetStyle()
	{
	}
	IMPLEMENT_CLASS(UShooterScoreboardWidgetStyle, 2314947487);
	void AShooterSpectatorPawn::StaticRegisterNativesAShooterSpectatorPawn()
	{
	}
	IMPLEMENT_CLASS(AShooterSpectatorPawn, 3274698863);
	void AShooterTeamStart::StaticRegisterNativesAShooterTeamStart()
	{
	}
	IMPLEMENT_CLASS(AShooterTeamStart, 2743773543);
class UScriptStruct* FInstantWeaponData::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FInstantWeaponData();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FInstantWeaponData_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FInstantWeaponData, Z_Construct_UPackage_ShooterGame(), TEXT("InstantWeaponData"), sizeof(FInstantWeaponData), Get_Z_Construct_UScriptStruct_FInstantWeaponData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FInstantWeaponData(FInstantWeaponData::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFInstantWeaponData
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFInstantWeaponData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("InstantWeaponData")),new UScriptStruct::TCppStructOps<FInstantWeaponData>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFInstantWeaponData;
class UScriptStruct* FInstantHitInfo::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FInstantHitInfo();
		extern SHOOTERGAME_API uint32 Get_Z_Construct_UScriptStruct_FInstantHitInfo_CRC();
		extern SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FInstantHitInfo, Z_Construct_UPackage_ShooterGame(), TEXT("InstantHitInfo"), sizeof(FInstantHitInfo), Get_Z_Construct_UScriptStruct_FInstantHitInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FInstantHitInfo(FInstantHitInfo::StaticStruct, TEXT("/Script/ShooterGame"));
static struct FScriptStruct_ShooterGame_StaticRegisterNativesFInstantHitInfo
{
	FScriptStruct_ShooterGame_StaticRegisterNativesFInstantHitInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("InstantHitInfo")),new UScriptStruct::TCppStructOps<FInstantHitInfo>);
	}
} ScriptStruct_ShooterGame_StaticRegisterNativesFInstantHitInfo;
	void AShooterWeapon_Instant::ServerNotifyHit(const FHitResult Impact, FVector_NetQuantizeNormal ShootDir, int32 RandomSeed, float ReticleSpread)
	{
		ShooterWeapon_Instant_eventServerNotifyHit_Parms Parms;
		Parms.Impact=Impact;
		Parms.ShootDir=ShootDir;
		Parms.RandomSeed=RandomSeed;
		Parms.ReticleSpread=ReticleSpread;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerNotifyHit),&Parms);
	}
	void AShooterWeapon_Instant::ServerNotifyMiss(FVector_NetQuantizeNormal ShootDir, int32 RandomSeed, float ReticleSpread)
	{
		ShooterWeapon_Instant_eventServerNotifyMiss_Parms Parms;
		Parms.ShootDir=ShootDir;
		Parms.RandomSeed=RandomSeed;
		Parms.ReticleSpread=ReticleSpread;
		ProcessEvent(FindFunctionChecked(SHOOTERGAME_ServerNotifyMiss),&Parms);
	}
	void AShooterWeapon_Instant::StaticRegisterNativesAShooterWeapon_Instant()
	{
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon_Instant::StaticClass(),"OnRep_HitNotify",(Native)&AShooterWeapon_Instant::execOnRep_HitNotify);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon_Instant::StaticClass(),"ServerNotifyHit",(Native)&AShooterWeapon_Instant::execServerNotifyHit);
		FNativeFunctionRegistrar::RegisterFunction(AShooterWeapon_Instant::StaticClass(),"ServerNotifyMiss",(Native)&AShooterWeapon_Instant::execServerNotifyMiss);
	}
	IMPLEMENT_CLASS(AShooterWeapon_Instant, 4144531771);
	void USoundNodeLocalPlayer::StaticRegisterNativesUSoundNodeLocalPlayer()
	{
	}
	IMPLEMENT_CLASS(USoundNodeLocalPlayer, 1590336245);
FName SHOOTERGAME_BroadcastDeath = FName(TEXT("BroadcastDeath"));
FName SHOOTERGAME_ClientEndOnlineGame = FName(TEXT("ClientEndOnlineGame"));
FName SHOOTERGAME_ClientGameStarted = FName(TEXT("ClientGameStarted"));
FName SHOOTERGAME_ClientSendRoundEndEvent = FName(TEXT("ClientSendRoundEndEvent"));
FName SHOOTERGAME_ClientSetSpectatorCamera = FName(TEXT("ClientSetSpectatorCamera"));
FName SHOOTERGAME_ClientStartOnlineGame = FName(TEXT("ClientStartOnlineGame"));
FName SHOOTERGAME_ClientStartReload = FName(TEXT("ClientStartReload"));
FName SHOOTERGAME_InformAboutKill = FName(TEXT("InformAboutKill"));
FName SHOOTERGAME_OnPickedUpEvent = FName(TEXT("OnPickedUpEvent"));
FName SHOOTERGAME_OnRespawnEvent = FName(TEXT("OnRespawnEvent"));
FName SHOOTERGAME_ServerCheat = FName(TEXT("ServerCheat"));
FName SHOOTERGAME_ServerEquipWeapon = FName(TEXT("ServerEquipWeapon"));
FName SHOOTERGAME_ServerFireProjectile = FName(TEXT("ServerFireProjectile"));
FName SHOOTERGAME_ServerHandleFiring = FName(TEXT("ServerHandleFiring"));
FName SHOOTERGAME_ServerNotifyHit = FName(TEXT("ServerNotifyHit"));
FName SHOOTERGAME_ServerNotifyMiss = FName(TEXT("ServerNotifyMiss"));
FName SHOOTERGAME_ServerSay = FName(TEXT("ServerSay"));
FName SHOOTERGAME_ServerSetRunning = FName(TEXT("ServerSetRunning"));
FName SHOOTERGAME_ServerSetTargeting = FName(TEXT("ServerSetTargeting"));
FName SHOOTERGAME_ServerStartFire = FName(TEXT("ServerStartFire"));
FName SHOOTERGAME_ServerStartReload = FName(TEXT("ServerStartReload"));
FName SHOOTERGAME_ServerStopFire = FName(TEXT("ServerStopFire"));
FName SHOOTERGAME_ServerStopReload = FName(TEXT("ServerStopReload"));
FName SHOOTERGAME_ServerSuicide = FName(TEXT("ServerSuicide"));
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	AIMODULE_API class UClass* Z_Construct_UClass_UBTDecorator();
	AIMODULE_API class UScriptStruct* Z_Construct_UScriptStruct_FBlackboardKeySelector();
	AIMODULE_API class UClass* Z_Construct_UClass_UBTTask_BlackboardBase();
	AIMODULE_API class UClass* Z_Construct_UClass_AAIController();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTreeComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBlackboardComponent_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FRadialDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FPointDamageEvent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FDamageEvent();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterial_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_ACharacter();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundCue_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UAnimMontage_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	AIMODULE_API class UClass* Z_Construct_UClass_UBehaviorTree_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCharacterMovementComponent();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateWidgetStyle();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateSound();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateColor();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FSlateBrush();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FEditableTextBoxStyle();
	SLATECORE_API class UClass* Z_Construct_UClass_USlateWidgetStyleContainerBase();
	ENGINE_API class UClass* Z_Construct_UClass_UCheatManager();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType();
	ENGINE_API class UClass* Z_Construct_UClass_UForceFeedbackEffect_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FCanvasIcon();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerController();
	ENGINE_API class UClass* Z_Construct_UClass_UGameEngine();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_UPointLightComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameMode();
	ENGINE_API class UClass* Z_Construct_UClass_UGameInstance();
	ENGINE_API class UClass* Z_Construct_UClass_APawn_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AGameSession();
	ENGINE_API class UClass* Z_Construct_UClass_AGameState();
	ENGINE_API class UClass* Z_Construct_UClass_UGameUserSettings();
	ENGINE_API class UClass* Z_Construct_UClass_UGameViewportClient();
	ENGINE_API class UClass* Z_Construct_UClass_AHUD();
	ENGINE_API class UClass* Z_Construct_UClass_UFont_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USaveGame();
	ENGINE_API class UClass* Z_Construct_UClass_ULocalPlayer();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystemComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerCameraManager();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	INPUTCORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKey();
	ENGINE_API class UClass* Z_Construct_UClass_UDamageType_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerState();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraShake_NoRegister();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FVector_NetQuantizeNormal();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UProjectileMovementComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_ASpectatorPawn();
	ENGINE_API class UClass* Z_Construct_UClass_APlayerStart();
	ENGINE_API class UClass* Z_Construct_UClass_USoundNode();

	SHOOTERGAME_API class UClass* Z_Construct_UClass_UBTDecorator_HasLoSTo_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UBTDecorator_HasLoSTo();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UBTTask_FindPickup_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UBTTask_FindPickup();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UBTTask_FindPointNearEnemy_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UBTTask_FindPointNearEnemy();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterAIController_FindClosestEnemy();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterAIController_FindClosestEnemyWithLOS();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterAIController_ShootEnemy();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterAIController_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterAIController();
	SHOOTERGAME_API class UEnum* Z_Construct_UEnum_ShooterGame_EShooterPhysMaterialType();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FTakeHitInfo();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FDecalData();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_GetAimOffsets();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_GetRunningSpeedModifier();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_GetTargetingSpeedModifier();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_GetWeapon();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_IsFiring();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_IsFirstPerson();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_IsRunning();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_IsTargeting();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_OnRep_CurrentWeapon();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_OnRep_LastTakeHitInfo();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_ServerEquipWeapon();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_ServerSetRunning();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterCharacter_ServerSetTargeting();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterCharacter_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterCharacter();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterBot_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterBot();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterCharacterMovement_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterCharacterMovement();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterChatStyle();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterChatWidgetStyle_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterChatWidgetStyle();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_UShooterCheatManager_ChangeTeam();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_UShooterCheatManager_Cheat();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_UShooterCheatManager_ForceMatchStart();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_UShooterCheatManager_SpawnBot();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_UShooterCheatManager_ToggleInfiniteAmmo();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_UShooterCheatManager_ToggleInfiniteClip();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_UShooterCheatManager_ToggleMatchTimer();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterCheatManager_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterCheatManager();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterDamageType_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterDamageType();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterDemoSpectator_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterDemoSpectator();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterEngine_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterEngine();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterExplosionEffect_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterExplosionEffect();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGame_Menu_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGame_Menu();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterGameInstance_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterGameInstance();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterGameMode_FinishMatch();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterGameMode_SetAllowBots();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGameMode_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGameMode();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGame_FreeForAll_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGame_FreeForAll();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGame_TeamDeathMatch_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGame_TeamDeathMatch();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGameSession_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGameSession();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGameState_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterGameState();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterGameUserSettings_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterGameUserSettings();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterGameViewportClient_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterGameViewportClient();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterHUD_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterHUD();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterImpactEffect_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterImpactEffect();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterPersistentUser_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterPersistentUser();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterLocalPlayer_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterLocalPlayer();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuItemStyle();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterMenuItemWidgetStyle_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterMenuItemWidgetStyle();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuSoundsStyle();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterMenuSoundsWidgetStyle_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterMenuSoundsWidgetStyle();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuStyle();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterMenuWidgetStyle_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterMenuWidgetStyle();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterOptionsStyle();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterOptionsWidgetStyle_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterOptionsWidgetStyle();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPickup_OnPickedUpEvent();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPickup_OnRep_IsActive();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPickup_OnRespawnEvent();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPickup_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPickup();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPickup_Ammo_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPickup_Ammo();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPickup_Health_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPickup_Health();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPlayerCameraManager_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPlayerCameraManager();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientEndOnlineGame();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientGameStarted();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientSendRoundEndEvent();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientSetSpectatorCamera();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientStartOnlineGame();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_Say();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_ServerCheat();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_ServerSay();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_ServerSuicide();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_SetGodMode();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_SimulateInputKey();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerController_Suicide();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPlayerController_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPlayerController();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPlayerController_Menu_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPlayerController_Menu();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerState_BroadcastDeath();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerState_InformAboutKill();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterPlayerState_OnRep_TeamColor();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPlayerState_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterPlayerState();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FWeaponAnim();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FWeaponData();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_ClientStartReload();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_GetPawnOwner();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_OnRep_BurstCounter();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_OnRep_MyPawn();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_OnRep_Reload();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_ServerHandleFiring();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_ServerStartFire();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_ServerStartReload();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_ServerStopFire();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_ServerStopReload();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterWeapon_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterWeapon();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FProjectileWeaponData();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_Projectile_ServerFireProjectile();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterWeapon_Projectile_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterWeapon_Projectile();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterProjectile_OnImpact();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterProjectile_OnRep_Exploded();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterProjectile_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterProjectile();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FShooterScoreboardStyle();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterScoreboardWidgetStyle_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_UShooterScoreboardWidgetStyle();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterSpectatorPawn_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterSpectatorPawn();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterTeamStart_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterTeamStart();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FInstantWeaponData();
	SHOOTERGAME_API class UScriptStruct* Z_Construct_UScriptStruct_FInstantHitInfo();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_Instant_OnRep_HitNotify();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_Instant_ServerNotifyHit();
	SHOOTERGAME_API class UFunction* Z_Construct_UFunction_AShooterWeapon_Instant_ServerNotifyMiss();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterWeapon_Instant_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_AShooterWeapon_Instant();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_USoundNodeLocalPlayer_NoRegister();
	SHOOTERGAME_API class UClass* Z_Construct_UClass_USoundNodeLocalPlayer();
	SHOOTERGAME_API class UPackage* Z_Construct_UPackage_ShooterGame();
	UClass* Z_Construct_UClass_UBTDecorator_HasLoSTo_NoRegister()
	{
		return UBTDecorator_HasLoSTo::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTDecorator_HasLoSTo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTDecorator();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UBTDecorator_HasLoSTo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_EnemyKey = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EnemyKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EnemyKey, UBTDecorator_HasLoSTo), 0x0000080000000001, Z_Construct_UScriptStruct_FBlackboardKeySelector());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Bots/BTDecorator_HasLoSTo.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Bots/BTDecorator_HasLoSTo.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Checks if the AI pawn has Line of sight to the specified Actor or Location(Vector)."));
				MetaData->SetValue(NewProp_EnemyKey, TEXT("Category"), TEXT("Condition"));
				MetaData->SetValue(NewProp_EnemyKey, TEXT("ModuleRelativePath"), TEXT("Public/Bots/BTDecorator_HasLoSTo.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTDecorator_HasLoSTo(Z_Construct_UClass_UBTDecorator_HasLoSTo, TEXT("UBTDecorator_HasLoSTo"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTDecorator_HasLoSTo);
	UClass* Z_Construct_UClass_UBTTask_FindPickup_NoRegister()
	{
		return UBTTask_FindPickup::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_FindPickup()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_BlackboardBase();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UBTTask_FindPickup::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Bots/BTTask_FindPickup.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Bots/BTTask_FindPickup.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Bot AI Task that attempts to locate a pickup"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_FindPickup(Z_Construct_UClass_UBTTask_FindPickup, TEXT("UBTTask_FindPickup"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_FindPickup);
	UClass* Z_Construct_UClass_UBTTask_FindPointNearEnemy_NoRegister()
	{
		return UBTTask_FindPointNearEnemy::StaticClass();
	}
	UClass* Z_Construct_UClass_UBTTask_FindPointNearEnemy()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBTTask_BlackboardBase();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UBTTask_FindPointNearEnemy::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Bots/BTTask_FindPointNearEnemy.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Bots/BTTask_FindPointNearEnemy.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Bot AI task that tries to find a location near the current enemy"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBTTask_FindPointNearEnemy(Z_Construct_UClass_UBTTask_FindPointNearEnemy, TEXT("UBTTask_FindPointNearEnemy"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBTTask_FindPointNearEnemy);
	UFunction* Z_Construct_UFunction_AShooterAIController_FindClosestEnemy()
	{
		UObject* Outer=Z_Construct_UClass_AShooterAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindClosestEnemy"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Bots/ShooterAIController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Finds the closest enemy and sets them as current target"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterAIController_FindClosestEnemyWithLOS()
	{
		struct ShooterAIController_eventFindClosestEnemyWithLOS_Parms
		{
			AShooterCharacter* ExcludeEnemy;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FindClosestEnemyWithLOS"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ShooterAIController_eventFindClosestEnemyWithLOS_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ShooterAIController_eventFindClosestEnemyWithLOS_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ShooterAIController_eventFindClosestEnemyWithLOS_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ShooterAIController_eventFindClosestEnemyWithLOS_Parms), sizeof(bool), true);
			UProperty* NewProp_ExcludeEnemy = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ExcludeEnemy"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ExcludeEnemy, ShooterAIController_eventFindClosestEnemyWithLOS_Parms), 0x0000000000000080, Z_Construct_UClass_AShooterCharacter_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Bots/ShooterAIController.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterAIController_ShootEnemy()
	{
		UObject* Outer=Z_Construct_UClass_AShooterAIController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShootEnemy"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Behavior"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Bots/ShooterAIController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If there is line of sight to current enemy, start firing at them"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterAIController_NoRegister()
	{
		return AShooterAIController::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterAIController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AAIController();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterAIController::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800280;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterAIController_FindClosestEnemy());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterAIController_FindClosestEnemyWithLOS());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterAIController_ShootEnemy());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BehaviorComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BehaviorComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BehaviorComp, AShooterAIController), 0x0000000000082008, Z_Construct_UClass_UBehaviorTreeComponent_NoRegister());
				UProperty* NewProp_BlackboardComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BlackboardComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BlackboardComp, AShooterAIController), 0x0000000000082008, Z_Construct_UClass_UBlackboardComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterAIController_FindClosestEnemy()); // 1935839442
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterAIController_FindClosestEnemyWithLOS()); // 1524192379
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterAIController_ShootEnemy()); // 1787216579
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Bots/ShooterAIController.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Bots/ShooterAIController.h"));
				MetaData->SetValue(NewProp_BehaviorComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BehaviorComp, TEXT("ModuleRelativePath"), TEXT("Public/Bots/ShooterAIController.h"));
				MetaData->SetValue(NewProp_BehaviorComp, TEXT("ToolTip"), TEXT("Cached BT component"));
				MetaData->SetValue(NewProp_BlackboardComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_BlackboardComp, TEXT("ModuleRelativePath"), TEXT("Public/Bots/ShooterAIController.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterAIController(Z_Construct_UClass_AShooterAIController, TEXT("AShooterAIController"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterAIController);
	UEnum* Z_Construct_UEnum_ShooterGame_EShooterPhysMaterialType()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UEnum* ReturnEnum = NULL;
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EShooterPhysMaterialType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Unknown")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Concrete")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Dirt")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Water")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Metal")), 4));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Wood")), 5));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Grass")), 6));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Glass")), 7));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::Flesh")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EShooterPhysMaterialType::EShooterPhysMaterialType_MAX")), 9));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("keep in sync with ShooterImpactEffect"));
#endif
		}
		return ReturnEnum;
	}
	UScriptStruct* Z_Construct_UScriptStruct_FTakeHitInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TakeHitInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FTakeHitInfo>, EStructFlags(0x00000005));
			UProperty* NewProp_RadialDamageEvent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RadialDamageEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RadialDamageEvent, FTakeHitInfo), 0x0000008000000000, Z_Construct_UScriptStruct_FRadialDamageEvent());
			UProperty* NewProp_PointDamageEvent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PointDamageEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PointDamageEvent, FTakeHitInfo), 0x0000008000000000, Z_Construct_UScriptStruct_FPointDamageEvent());
			UProperty* NewProp_GeneralDamageEvent = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GeneralDamageEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(GeneralDamageEvent, FTakeHitInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FDamageEvent());
			UProperty* NewProp_EnsureReplicationByte = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("EnsureReplicationByte"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(EnsureReplicationByte, FTakeHitInfo), 0x0000000000000000);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bKilled, FTakeHitInfo, uint8);
			UProperty* NewProp_bKilled = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bKilled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bKilled, FTakeHitInfo), 0x0000000000000000, CPP_BOOL_PROPERTY_BITMASK(bKilled, FTakeHitInfo), sizeof(uint8), false);
			UProperty* NewProp_DamageEventClassID = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageEventClassID"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DamageEventClassID, FTakeHitInfo), 0x0000000000000000);
			UProperty* NewProp_DamageCauser = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageCauser"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(DamageCauser, FTakeHitInfo), 0x0004000000000000, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_PawnInstigator = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PawnInstigator"), RF_Public|RF_Transient|RF_Native) UWeakObjectProperty(CPP_PROPERTY_BASE(PawnInstigator, FTakeHitInfo), 0x0004000000000000, Z_Construct_UClass_AShooterCharacter_NoRegister());
			UProperty* NewProp_DamageTypeClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageTypeClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DamageTypeClass, FTakeHitInfo), 0x0000000000000000, Z_Construct_UClass_UObject_NoRegister());
			UProperty* NewProp_ActualDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ActualDamage"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ActualDamage, FTakeHitInfo), 0x0000000000000000);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("replicated information on a hit we've taken"));
			MetaData->SetValue(NewProp_RadialDamageEvent, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_RadialDamageEvent, TEXT("ToolTip"), TEXT("Describes radial damage, if that is what was received."));
			MetaData->SetValue(NewProp_PointDamageEvent, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_PointDamageEvent, TEXT("ToolTip"), TEXT("Describes point damage, if that is what was received."));
			MetaData->SetValue(NewProp_GeneralDamageEvent, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_GeneralDamageEvent, TEXT("ToolTip"), TEXT("Describes general damage."));
			MetaData->SetValue(NewProp_EnsureReplicationByte, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_EnsureReplicationByte, TEXT("ToolTip"), TEXT("A rolling counter used to ensure the struct is dirty and will replicate."));
			MetaData->SetValue(NewProp_bKilled, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_bKilled, TEXT("ToolTip"), TEXT("Rather this was a kill"));
			MetaData->SetValue(NewProp_DamageEventClassID, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_DamageEventClassID, TEXT("ToolTip"), TEXT("Specifies which DamageEvent below describes the damage received."));
			MetaData->SetValue(NewProp_DamageCauser, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_DamageCauser, TEXT("ToolTip"), TEXT("Who actually caused the damage"));
			MetaData->SetValue(NewProp_PawnInstigator, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_PawnInstigator, TEXT("ToolTip"), TEXT("Who hit us"));
			MetaData->SetValue(NewProp_DamageTypeClass, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_DamageTypeClass, TEXT("ToolTip"), TEXT("The damage type we were hit with."));
			MetaData->SetValue(NewProp_ActualDamage, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_ActualDamage, TEXT("ToolTip"), TEXT("The amount of damage actually applied"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FTakeHitInfo_CRC() { return 3817521283U; }
	UScriptStruct* Z_Construct_UScriptStruct_FDecalData()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DecalData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FDecalData>, EStructFlags(0x00000001));
			UProperty* NewProp_LifeSpan = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LifeSpan"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(LifeSpan, FDecalData), 0x0000000000010001);
			UProperty* NewProp_DecalSize = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DecalSize"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DecalSize, FDecalData), 0x0000000000010001);
			UProperty* NewProp_DecalMaterial = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DecalMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DecalMaterial, FDecalData), 0x0000000000010001, Z_Construct_UClass_UMaterial_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(NewProp_LifeSpan, TEXT("Category"), TEXT("Decal"));
			MetaData->SetValue(NewProp_LifeSpan, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_LifeSpan, TEXT("ToolTip"), TEXT("lifespan"));
			MetaData->SetValue(NewProp_DecalSize, TEXT("Category"), TEXT("Decal"));
			MetaData->SetValue(NewProp_DecalSize, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_DecalSize, TEXT("ToolTip"), TEXT("quad size (width & height)"));
			MetaData->SetValue(NewProp_DecalMaterial, TEXT("Category"), TEXT("Decal"));
			MetaData->SetValue(NewProp_DecalMaterial, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTypes.h"));
			MetaData->SetValue(NewProp_DecalMaterial, TEXT("ToolTip"), TEXT("material"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FDecalData_CRC() { return 259064817U; }
	UFunction* Z_Construct_UFunction_AShooterCharacter_GetAimOffsets()
	{
		struct ShooterCharacter_eventGetAimOffsets_Parms
		{
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAimOffsets"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(ShooterCharacter_eventGetAimOffsets_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, ShooterCharacter_eventGetAimOffsets_Parms), 0x0000000000000580, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get aim offsets"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_GetRunningSpeedModifier()
	{
		struct ShooterCharacter_eventGetRunningSpeedModifier_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRunningSpeedModifier"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ShooterCharacter_eventGetRunningSpeedModifier_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, ShooterCharacter_eventGetRunningSpeedModifier_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get the modifier value for running speed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_GetTargetingSpeedModifier()
	{
		struct ShooterCharacter_eventGetTargetingSpeedModifier_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTargetingSpeedModifier"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ShooterCharacter_eventGetTargetingSpeedModifier_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, ShooterCharacter_eventGetTargetingSpeedModifier_Parms), 0x0000000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get weapon taget modifier speed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_GetWeapon()
	{
		struct ShooterCharacter_eventGetWeapon_Parms
		{
			AShooterWeapon* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetWeapon"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ShooterCharacter_eventGetWeapon_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, ShooterCharacter_eventGetWeapon_Parms), 0x0000000000000580, Z_Construct_UClass_AShooterWeapon_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get currently equipped weapon"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_IsFiring()
	{
		struct ShooterCharacter_eventIsFiring_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsFiring"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ShooterCharacter_eventIsFiring_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ShooterCharacter_eventIsFiring_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ShooterCharacter_eventIsFiring_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ShooterCharacter_eventIsFiring_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get firing state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_IsFirstPerson()
	{
		struct ShooterCharacter_eventIsFirstPerson_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsFirstPerson"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020400, 65535, sizeof(ShooterCharacter_eventIsFirstPerson_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ShooterCharacter_eventIsFirstPerson_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ShooterCharacter_eventIsFirstPerson_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ShooterCharacter_eventIsFirstPerson_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Mesh"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get camera view type"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_IsRunning()
	{
		struct ShooterCharacter_eventIsRunning_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsRunning"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ShooterCharacter_eventIsRunning_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ShooterCharacter_eventIsRunning_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ShooterCharacter_eventIsRunning_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ShooterCharacter_eventIsRunning_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get running state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_IsTargeting()
	{
		struct ShooterCharacter_eventIsTargeting_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsTargeting"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ShooterCharacter_eventIsTargeting_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, ShooterCharacter_eventIsTargeting_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, ShooterCharacter_eventIsTargeting_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, ShooterCharacter_eventIsTargeting_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get targeting state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_OnRep_CurrentWeapon()
	{
		struct ShooterCharacter_eventOnRep_CurrentWeapon_Parms
		{
			AShooterWeapon* LastWeapon;
		};
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_CurrentWeapon"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535, sizeof(ShooterCharacter_eventOnRep_CurrentWeapon_Parms));
			UProperty* NewProp_LastWeapon = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LastWeapon"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LastWeapon, ShooterCharacter_eventOnRep_CurrentWeapon_Parms), 0x0000000000000080, Z_Construct_UClass_AShooterWeapon_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("current weapon rep handler"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_OnRep_LastTakeHitInfo()
	{
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_LastTakeHitInfo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("play hit or death on client"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_ServerEquipWeapon()
	{
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerEquipWeapon"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(ShooterCharacter_eventServerEquipWeapon_Parms));
			UProperty* NewProp_NewWeapon = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewWeapon"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NewWeapon, ShooterCharacter_eventServerEquipWeapon_Parms), 0x0000000000000080, Z_Construct_UClass_AShooterWeapon_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("equip weapon"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_ServerSetRunning()
	{
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSetRunning"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(ShooterCharacter_eventServerSetRunning_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bToggle, ShooterCharacter_eventServerSetRunning_Parms, bool);
			UProperty* NewProp_bToggle = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bToggle"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bToggle, ShooterCharacter_eventServerSetRunning_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bToggle, ShooterCharacter_eventServerSetRunning_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNewRunning, ShooterCharacter_eventServerSetRunning_Parms, bool);
			UProperty* NewProp_bNewRunning = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bNewRunning"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNewRunning, ShooterCharacter_eventServerSetRunning_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bNewRunning, ShooterCharacter_eventServerSetRunning_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("update targeting state"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterCharacter_ServerSetTargeting()
	{
		UObject* Outer=Z_Construct_UClass_AShooterCharacter();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSetTargeting"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(ShooterCharacter_eventServerSetTargeting_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNewTargeting, ShooterCharacter_eventServerSetTargeting_Parms, bool);
			UProperty* NewProp_bNewTargeting = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bNewTargeting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNewTargeting, ShooterCharacter_eventServerSetTargeting_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bNewTargeting, ShooterCharacter_eventServerSetTargeting_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("update targeting state"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterCharacter_NoRegister()
	{
		return AShooterCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACharacter();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterCharacter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_GetAimOffsets());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_GetRunningSpeedModifier());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_GetTargetingSpeedModifier());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_GetWeapon());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_IsFiring());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_IsFirstPerson());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_IsRunning());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_IsTargeting());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_OnRep_CurrentWeapon());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_OnRep_LastTakeHitInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_ServerEquipWeapon());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_ServerSetRunning());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterCharacter_ServerSetTargeting());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(isHungry, AShooterCharacter, bool);
				UProperty* NewProp_isHungry = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("isHungry"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(isHungry, AShooterCharacter), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(isHungry, AShooterCharacter), sizeof(bool), true);
				UProperty* NewProp_StaminaRegenRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaminaRegenRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StaminaRegenRate, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_StaminaReduceRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaminaReduceRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StaminaReduceRate, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_HungerReduceRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HungerReduceRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HungerReduceRate, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_HPReduceRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HPReduceRate"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HPReduceRate, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_StaminaCurrent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaminaCurrent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StaminaCurrent, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_StaminaMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StaminaMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(StaminaMax, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_HungerCurrent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HungerCurrent"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HungerCurrent, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_HungerMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HungerMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HungerMax, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_HPMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HPMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(HPMax, AShooterCharacter), 0x0000000000000005);
				UProperty* NewProp_Health = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Health"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Health, AShooterCharacter), 0x0000000000000025);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsDying, AShooterCharacter, uint8);
				UProperty* NewProp_bIsDying = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsDying"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsDying, AShooterCharacter), 0x0000000000020015, CPP_BOOL_PROPERTY_BITMASK(bIsDying, AShooterCharacter), sizeof(uint8), false);
				UProperty* NewProp_LowHealthWarningPlayer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LowHealthWarningPlayer"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LowHealthWarningPlayer, AShooterCharacter), 0x0000080000080008, Z_Construct_UClass_UAudioComponent_NoRegister());
				UProperty* NewProp_RunLoopAC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RunLoopAC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RunLoopAC, AShooterCharacter), 0x0000080000080008, Z_Construct_UClass_UAudioComponent_NoRegister());
				UProperty* NewProp_TargetingSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetingSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TargetingSound, AShooterCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_RunStopSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RunStopSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RunStopSound, AShooterCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_RunLoopSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RunLoopSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RunLoopSound, AShooterCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_LowHealthSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LowHealthSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LowHealthSound, AShooterCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_RespawnSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RespawnSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RespawnSound, AShooterCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_RespawnFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RespawnFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RespawnFX, AShooterCharacter), 0x0000080000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_DeathSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeathSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DeathSound, AShooterCharacter), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_DeathAnim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeathAnim"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DeathAnim, AShooterCharacter), 0x0000080000010001, Z_Construct_UClass_UAnimMontage_NoRegister());
				UProperty* NewProp_MeshMIDs = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshMIDs"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(MeshMIDs, AShooterCharacter), 0x0000080000002000);
				UProperty* NewProp_MeshMIDs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MeshMIDs, TEXT("MeshMIDs"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bWantsToRun, AShooterCharacter, uint8);
				UProperty* NewProp_bWantsToRun = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bWantsToRun"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bWantsToRun, AShooterCharacter), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bWantsToRun, AShooterCharacter), sizeof(uint8), false);
				UProperty* NewProp_RunningSpeedModifier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RunningSpeedModifier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RunningSpeedModifier, AShooterCharacter), 0x0000080000010001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTargeting, AShooterCharacter, uint8);
				UProperty* NewProp_bIsTargeting = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsTargeting"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTargeting, AShooterCharacter), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bIsTargeting, AShooterCharacter), sizeof(uint8), false);
				UProperty* NewProp_TargetingSpeedModifier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TargetingSpeedModifier"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TargetingSpeedModifier, AShooterCharacter), 0x0000080000010001);
				UProperty* NewProp_LastTakeHitInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LastTakeHitInfo"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LastTakeHitInfo, AShooterCharacter), 0x0000088100002020, Z_Construct_UScriptStruct_FTakeHitInfo());
				NewProp_LastTakeHitInfo->RepNotifyFunc = FName(TEXT("OnRep_LastTakeHitInfo"));
				UProperty* NewProp_CurrentWeapon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentWeapon"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CurrentWeapon, AShooterCharacter), 0x0000080100002020, Z_Construct_UClass_AShooterWeapon_NoRegister());
				NewProp_CurrentWeapon->RepNotifyFunc = FName(TEXT("OnRep_CurrentWeapon"));
				UProperty* NewProp_Inventory = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Inventory"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Inventory, AShooterCharacter), 0x0000080000002020);
				UProperty* NewProp_Inventory_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Inventory, TEXT("Inventory"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AShooterWeapon_NoRegister());
				UProperty* NewProp_DefaultInventoryClasses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultInventoryClasses"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(DefaultInventoryClasses, AShooterCharacter), 0x0004080000010001);
				UProperty* NewProp_DefaultInventoryClasses_Inner = new(EC_InternalUseOnlyConstructor, NewProp_DefaultInventoryClasses, TEXT("DefaultInventoryClasses"), RF_Public|RF_Transient|RF_Native) UClassProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0004000000000000, Z_Construct_UClass_AShooterWeapon_NoRegister());
				UProperty* NewProp_WeaponAttachPoint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeaponAttachPoint"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(WeaponAttachPoint, AShooterCharacter), 0x0000080000010001);
				UProperty* NewProp_Mesh1P = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mesh1P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh1P, AShooterCharacter), 0x00000000000b0009, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_GetAimOffsets()); // 738135872
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_GetRunningSpeedModifier()); // 3219212180
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_GetTargetingSpeedModifier()); // 1718499300
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_GetWeapon()); // 2782666737
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_IsFiring()); // 1062818054
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_IsFirstPerson()); // 2234267220
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_IsRunning()); // 2397233039
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_IsTargeting()); // 2471779819
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_OnRep_CurrentWeapon()); // 1497143391
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_OnRep_LastTakeHitInfo()); // 149744309
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_ServerEquipWeapon()); // 1701741882
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_ServerSetRunning()); // 637009505
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterCharacter_ServerSetTargeting()); // 2556850878
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_isHungry, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_isHungry, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_StaminaRegenRate, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_StaminaRegenRate, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_StaminaReduceRate, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_StaminaReduceRate, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_HungerReduceRate, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_HungerReduceRate, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_HPReduceRate, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_HPReduceRate, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_StaminaCurrent, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_StaminaCurrent, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_StaminaMax, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_StaminaMax, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_HungerCurrent, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_HungerCurrent, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_HungerMax, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_HungerMax, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_HungerMax, TEXT("ToolTip"), TEXT("UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Core Mechanism\")\nfloat HPCurrent;"));
				MetaData->SetValue(NewProp_HPMax, TEXT("Category"), TEXT("Core Mechanism"));
				MetaData->SetValue(NewProp_HPMax, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_HPMax, TEXT("ToolTip"), TEXT("The core game mechanism *"));
				MetaData->SetValue(NewProp_Health, TEXT("Category"), TEXT("Health"));
				MetaData->SetValue(NewProp_Health, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_Health, TEXT("ToolTip"), TEXT("Current health of the Pawn"));
				MetaData->SetValue(NewProp_bIsDying, TEXT("Category"), TEXT("Health"));
				MetaData->SetValue(NewProp_bIsDying, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_bIsDying, TEXT("ToolTip"), TEXT("Identifies if pawn is in its dying state"));
				MetaData->SetValue(NewProp_LowHealthWarningPlayer, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LowHealthWarningPlayer, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_LowHealthWarningPlayer, TEXT("ToolTip"), TEXT("hook to looped low health sound used to stop/adjust volume"));
				MetaData->SetValue(NewProp_RunLoopAC, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RunLoopAC, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_RunLoopAC, TEXT("ToolTip"), TEXT("used to manipulate with run loop sound"));
				MetaData->SetValue(NewProp_TargetingSound, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_TargetingSound, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_TargetingSound, TEXT("ToolTip"), TEXT("sound played when targeting state changes"));
				MetaData->SetValue(NewProp_RunStopSound, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_RunStopSound, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_RunStopSound, TEXT("ToolTip"), TEXT("sound played when stop running"));
				MetaData->SetValue(NewProp_RunLoopSound, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_RunLoopSound, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_RunLoopSound, TEXT("ToolTip"), TEXT("sound played when running"));
				MetaData->SetValue(NewProp_LowHealthSound, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_LowHealthSound, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_LowHealthSound, TEXT("ToolTip"), TEXT("sound played when health is low"));
				MetaData->SetValue(NewProp_RespawnSound, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_RespawnSound, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_RespawnSound, TEXT("ToolTip"), TEXT("sound played on respawn"));
				MetaData->SetValue(NewProp_RespawnFX, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_RespawnFX, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_RespawnFX, TEXT("ToolTip"), TEXT("effect played on respawn"));
				MetaData->SetValue(NewProp_DeathSound, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_DeathSound, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_DeathSound, TEXT("ToolTip"), TEXT("sound played on death, local player only"));
				MetaData->SetValue(NewProp_DeathAnim, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_DeathAnim, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_DeathAnim, TEXT("ToolTip"), TEXT("animation played on death"));
				MetaData->SetValue(NewProp_MeshMIDs, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_MeshMIDs, TEXT("ToolTip"), TEXT("material instances for setting team color in mesh (3rd person view)"));
				MetaData->SetValue(NewProp_bWantsToRun, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_bWantsToRun, TEXT("ToolTip"), TEXT("current running state"));
				MetaData->SetValue(NewProp_RunningSpeedModifier, TEXT("Category"), TEXT("Pawn"));
				MetaData->SetValue(NewProp_RunningSpeedModifier, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_RunningSpeedModifier, TEXT("ToolTip"), TEXT("modifier for max movement speed"));
				MetaData->SetValue(NewProp_bIsTargeting, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_bIsTargeting, TEXT("ToolTip"), TEXT("current targeting state"));
				MetaData->SetValue(NewProp_TargetingSpeedModifier, TEXT("Category"), TEXT("Inventory"));
				MetaData->SetValue(NewProp_TargetingSpeedModifier, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_TargetingSpeedModifier, TEXT("ToolTip"), TEXT("modifier for max movement speed"));
				MetaData->SetValue(NewProp_LastTakeHitInfo, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_LastTakeHitInfo, TEXT("ToolTip"), TEXT("Replicate where this pawn was last hit and damaged"));
				MetaData->SetValue(NewProp_CurrentWeapon, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_CurrentWeapon, TEXT("ToolTip"), TEXT("currently equipped weapon"));
				MetaData->SetValue(NewProp_Inventory, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_Inventory, TEXT("ToolTip"), TEXT("weapons in inventory"));
				MetaData->SetValue(NewProp_DefaultInventoryClasses, TEXT("Category"), TEXT("Inventory"));
				MetaData->SetValue(NewProp_DefaultInventoryClasses, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_DefaultInventoryClasses, TEXT("ToolTip"), TEXT("default inventory list"));
				MetaData->SetValue(NewProp_WeaponAttachPoint, TEXT("Category"), TEXT("Inventory"));
				MetaData->SetValue(NewProp_WeaponAttachPoint, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_WeaponAttachPoint, TEXT("ToolTip"), TEXT("socket or bone name for attaching weapon mesh"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacter.h"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("ToolTip"), TEXT("pawn mesh: 1st person view"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterCharacter(Z_Construct_UClass_AShooterCharacter, TEXT("AShooterCharacter"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterCharacter);
	UClass* Z_Construct_UClass_AShooterBot_NoRegister()
	{
		return AShooterBot::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterBot()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AShooterCharacter();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterBot::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BotBehavior = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BotBehavior"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BotBehavior, AShooterBot), 0x0000000000000001, Z_Construct_UClass_UBehaviorTree_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Bots/ShooterBot.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Bots/ShooterBot.h"));
				MetaData->SetValue(NewProp_BotBehavior, TEXT("Category"), TEXT("Behavior"));
				MetaData->SetValue(NewProp_BotBehavior, TEXT("ModuleRelativePath"), TEXT("Public/Bots/ShooterBot.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterBot(Z_Construct_UClass_AShooterBot, TEXT("AShooterBot"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterBot);
	UClass* Z_Construct_UClass_UShooterCharacterMovement_NoRegister()
	{
		return UShooterCharacterMovement::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterCharacterMovement()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCharacterMovementComponent();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterCharacterMovement::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterCharacterMovement.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCharacterMovement.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterCharacterMovement(Z_Construct_UClass_UShooterCharacterMovement, TEXT("UShooterCharacterMovement"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterCharacterMovement);
	UScriptStruct* Z_Construct_UScriptStruct_FShooterChatStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShooterChatStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FShooterChatStyle>, EStructFlags(0x00000001));
			UProperty* NewProp_TxMessgeSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TxMessgeSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TxMessgeSound, FShooterChatStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_RxMessgeSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RxMessgeSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RxMessgeSound, FShooterChatStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_TextColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextColor, FShooterChatStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_BoxBorderColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoxBorderColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BoxBorderColor, FShooterChatStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_BackingBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackingBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackingBrush, FShooterChatStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_TextEntryStyle = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TextEntryStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TextEntryStyle, FShooterChatStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FEditableTextBoxStyle());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SChatWidget"));
			MetaData->SetValue(NewProp_TxMessgeSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_TxMessgeSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterChatWidgetStyle.h"));
			MetaData->SetValue(NewProp_TxMessgeSound, TEXT("ToolTip"), TEXT("The sound that should play when sending a chat message"));
			MetaData->SetValue(NewProp_RxMessgeSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_RxMessgeSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterChatWidgetStyle.h"));
			MetaData->SetValue(NewProp_RxMessgeSound, TEXT("ToolTip"), TEXT("The sound that should play when receiving a chat message"));
			MetaData->SetValue(NewProp_TextColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TextColor, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterChatWidgetStyle.h"));
			MetaData->SetValue(NewProp_TextColor, TEXT("ToolTip"), TEXT("The color used for the chat box text"));
			MetaData->SetValue(NewProp_BoxBorderColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BoxBorderColor, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterChatWidgetStyle.h"));
			MetaData->SetValue(NewProp_BoxBorderColor, TEXT("ToolTip"), TEXT("The color used for the chat box border"));
			MetaData->SetValue(NewProp_BackingBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackingBrush, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterChatWidgetStyle.h"));
			MetaData->SetValue(NewProp_BackingBrush, TEXT("ToolTip"), TEXT("The brush used for the chat backing"));
			MetaData->SetValue(NewProp_TextEntryStyle, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_TextEntryStyle, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterChatWidgetStyle.h"));
			MetaData->SetValue(NewProp_TextEntryStyle, TEXT("ToolTip"), TEXT("The style used for entering chat text"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FShooterChatStyle_CRC() { return 3971389604U; }
	UClass* Z_Construct_UClass_UShooterChatWidgetStyle_NoRegister()
	{
		return UShooterChatWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterChatWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterChatWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ChatStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ChatStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ChatStyle, UShooterChatWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FShooterChatStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UI/Style/ShooterChatWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterChatWidgetStyle.h"));
				MetaData->SetValue(NewProp_ChatStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ChatStyle, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterChatWidgetStyle.h"));
				MetaData->SetValue(NewProp_ChatStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ChatStyle, TEXT("ToolTip"), TEXT("The actual data describing the chat appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterChatWidgetStyle(Z_Construct_UClass_UShooterChatWidgetStyle, TEXT("UShooterChatWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterChatWidgetStyle);
	UFunction* Z_Construct_UFunction_UShooterCheatManager_ChangeTeam()
	{
		struct ShooterCheatManager_eventChangeTeam_Parms
		{
			int32 NewTeamNumber;
		};
		UObject* Outer=Z_Construct_UClass_UShooterCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ChangeTeam"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(ShooterCheatManager_eventChangeTeam_Parms));
			UProperty* NewProp_NewTeamNumber = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewTeamNumber"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewTeamNumber, ShooterCheatManager_eventChangeTeam_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UShooterCheatManager_Cheat()
	{
		struct ShooterCheatManager_eventCheat_Parms
		{
			FString Msg;
		};
		UObject* Outer=Z_Construct_UClass_UShooterCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Cheat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(ShooterCheatManager_eventCheat_Parms));
			UProperty* NewProp_Msg = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Msg"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Msg, ShooterCheatManager_eventCheat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UShooterCheatManager_ForceMatchStart()
	{
		UObject* Outer=Z_Construct_UClass_UShooterCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ForceMatchStart"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UShooterCheatManager_SpawnBot()
	{
		UObject* Outer=Z_Construct_UClass_UShooterCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnBot"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UShooterCheatManager_ToggleInfiniteAmmo()
	{
		UObject* Outer=Z_Construct_UClass_UShooterCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleInfiniteAmmo"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UShooterCheatManager_ToggleInfiniteClip()
	{
		UObject* Outer=Z_Construct_UClass_UShooterCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleInfiniteClip"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UShooterCheatManager_ToggleMatchTimer()
	{
		UObject* Outer=Z_Construct_UClass_UShooterCheatManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ToggleMatchTimer"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCheatManager.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UShooterCheatManager_NoRegister()
	{
		return UShooterCheatManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterCheatManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UCheatManager();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterCheatManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;

				OuterClass->LinkChild(Z_Construct_UFunction_UShooterCheatManager_ChangeTeam());
				OuterClass->LinkChild(Z_Construct_UFunction_UShooterCheatManager_Cheat());
				OuterClass->LinkChild(Z_Construct_UFunction_UShooterCheatManager_ForceMatchStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UShooterCheatManager_SpawnBot());
				OuterClass->LinkChild(Z_Construct_UFunction_UShooterCheatManager_ToggleInfiniteAmmo());
				OuterClass->LinkChild(Z_Construct_UFunction_UShooterCheatManager_ToggleInfiniteClip());
				OuterClass->LinkChild(Z_Construct_UFunction_UShooterCheatManager_ToggleMatchTimer());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UShooterCheatManager_ChangeTeam()); // 732792647
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UShooterCheatManager_Cheat()); // 2455134321
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UShooterCheatManager_ForceMatchStart()); // 3636669496
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UShooterCheatManager_SpawnBot()); // 3394588279
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UShooterCheatManager_ToggleInfiniteAmmo()); // 3947527194
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UShooterCheatManager_ToggleInfiniteClip()); // 2236797219
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UShooterCheatManager_ToggleMatchTimer()); // 19116014
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterCheatManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterCheatManager.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterCheatManager(Z_Construct_UClass_UShooterCheatManager, TEXT("UShooterCheatManager"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterCheatManager);
	UClass* Z_Construct_UClass_UShooterDamageType_NoRegister()
	{
		return UShooterDamageType::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterDamageType()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UDamageType();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterDamageType::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20010080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_KilledForceFeedback = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KilledForceFeedback"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(KilledForceFeedback, UShooterDamageType), 0x0000000000010011, Z_Construct_UClass_UForceFeedbackEffect_NoRegister());
				UProperty* NewProp_HitForceFeedback = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HitForceFeedback"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HitForceFeedback, UShooterDamageType), 0x0000000000010011, Z_Construct_UClass_UForceFeedbackEffect_NoRegister());
				UProperty* NewProp_KillIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KillIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(KillIcon, UShooterDamageType), 0x0000000000010011, Z_Construct_UScriptStruct_FCanvasIcon());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Weapons/ShooterDamageType.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterDamageType.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("DamageType class that specifies an icon to display"));
				MetaData->SetValue(NewProp_KilledForceFeedback, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_KilledForceFeedback, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterDamageType.h"));
				MetaData->SetValue(NewProp_KilledForceFeedback, TEXT("ToolTip"), TEXT("force feedback effect to play on a player killed by this damage type"));
				MetaData->SetValue(NewProp_HitForceFeedback, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_HitForceFeedback, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterDamageType.h"));
				MetaData->SetValue(NewProp_HitForceFeedback, TEXT("ToolTip"), TEXT("force feedback effect to play on a player hit by this damage type"));
				MetaData->SetValue(NewProp_KillIcon, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_KillIcon, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterDamageType.h"));
				MetaData->SetValue(NewProp_KillIcon, TEXT("ToolTip"), TEXT("icon displayed in death messages log when killed with this weapon"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterDamageType(Z_Construct_UClass_UShooterDamageType, TEXT("UShooterDamageType"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterDamageType);
	UClass* Z_Construct_UClass_AShooterDemoSpectator_NoRegister()
	{
		return AShooterDemoSpectator::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterDemoSpectator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerController();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterDemoSpectator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800284;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterDemoSpectator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterDemoSpectator.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterDemoSpectator(Z_Construct_UClass_AShooterDemoSpectator, TEXT("AShooterDemoSpectator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterDemoSpectator);
	UClass* Z_Construct_UClass_UShooterEngine_NoRegister()
	{
		return UShooterEngine::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterEngine()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameEngine();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterEngine::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2010008E;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ShooterEngine.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/ShooterEngine.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterEngine(Z_Construct_UClass_UShooterEngine, TEXT("UShooterEngine"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterEngine);
	UClass* Z_Construct_UClass_AShooterExplosionEffect_NoRegister()
	{
		return AShooterExplosionEffect::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterExplosionEffect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterExplosionEffect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SurfaceHit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SurfaceHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SurfaceHit, AShooterExplosionEffect), 0x0000008000000014, Z_Construct_UScriptStruct_FHitResult());
				UProperty* NewProp_Decal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Decal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Decal, AShooterExplosionEffect), 0x0000000000010001, Z_Construct_UScriptStruct_FDecalData());
				UProperty* NewProp_ExplosionSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExplosionSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ExplosionSound, AShooterExplosionEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_ExplosionLightFadeOut = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExplosionLightFadeOut"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ExplosionLightFadeOut, AShooterExplosionEffect), 0x0000000000010001);
				UProperty* NewProp_ExplosionLight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExplosionLight"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ExplosionLight, AShooterExplosionEffect), 0x00000000000b0009, Z_Construct_UClass_UPointLightComponent_NoRegister());
				UProperty* NewProp_ExplosionFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExplosionFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ExplosionFX, AShooterExplosionEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Effects/ShooterExplosionEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterExplosionEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Spawnable effect for explosion - NOT replicated to clients\nEach explosion type should be defined as separate blueprint"));
				MetaData->SetValue(NewProp_SurfaceHit, TEXT("Category"), TEXT("Surface"));
				MetaData->SetValue(NewProp_SurfaceHit, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterExplosionEffect.h"));
				MetaData->SetValue(NewProp_SurfaceHit, TEXT("ToolTip"), TEXT("surface data for spawning"));
				MetaData->SetValue(NewProp_Decal, TEXT("Category"), TEXT("Effect"));
				MetaData->SetValue(NewProp_Decal, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterExplosionEffect.h"));
				MetaData->SetValue(NewProp_Decal, TEXT("ToolTip"), TEXT("explosion decals"));
				MetaData->SetValue(NewProp_ExplosionSound, TEXT("Category"), TEXT("Effect"));
				MetaData->SetValue(NewProp_ExplosionSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterExplosionEffect.h"));
				MetaData->SetValue(NewProp_ExplosionSound, TEXT("ToolTip"), TEXT("explosion sound"));
				MetaData->SetValue(NewProp_ExplosionLightFadeOut, TEXT("Category"), TEXT("Effect"));
				MetaData->SetValue(NewProp_ExplosionLightFadeOut, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterExplosionEffect.h"));
				MetaData->SetValue(NewProp_ExplosionLightFadeOut, TEXT("ToolTip"), TEXT("how long keep explosion light on?"));
				MetaData->SetValue(NewProp_ExplosionLight, TEXT("Category"), TEXT("Effect"));
				MetaData->SetValue(NewProp_ExplosionLight, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ExplosionLight, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterExplosionEffect.h"));
				MetaData->SetValue(NewProp_ExplosionLight, TEXT("ToolTip"), TEXT("explosion light"));
				MetaData->SetValue(NewProp_ExplosionFX, TEXT("Category"), TEXT("Effect"));
				MetaData->SetValue(NewProp_ExplosionFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterExplosionEffect.h"));
				MetaData->SetValue(NewProp_ExplosionFX, TEXT("ToolTip"), TEXT("explosion FX"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterExplosionEffect(Z_Construct_UClass_AShooterExplosionEffect, TEXT("AShooterExplosionEffect"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterExplosionEffect);
	UClass* Z_Construct_UClass_AShooterGame_Menu_NoRegister()
	{
		return AShooterGame_Menu::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterGame_Menu()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterGame_Menu::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2080028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Online/ShooterGame_Menu.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGame_Menu.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterGame_Menu(Z_Construct_UClass_AShooterGame_Menu, TEXT("AShooterGame_Menu"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterGame_Menu);
	UClass* Z_Construct_UClass_UShooterGameInstance_NoRegister()
	{
		return UShooterGameInstance::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterGameInstance()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameInstance();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterGameInstance::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2000008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MainMenuMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MainMenuMap"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(MainMenuMap, UShooterGameInstance), 0x0000000000004000);
				UProperty* NewProp_WelcomeScreenMap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WelcomeScreenMap"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(WelcomeScreenMap, UShooterGameInstance), 0x0000000000004000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ShooterGameInstance.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/ShooterGameInstance.h"));
				MetaData->SetValue(NewProp_MainMenuMap, TEXT("ModuleRelativePath"), TEXT("Public/ShooterGameInstance.h"));
				MetaData->SetValue(NewProp_WelcomeScreenMap, TEXT("ModuleRelativePath"), TEXT("Public/ShooterGameInstance.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterGameInstance(Z_Construct_UClass_UShooterGameInstance, TEXT("UShooterGameInstance"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterGameInstance);
	UFunction* Z_Construct_UFunction_AShooterGameMode_FinishMatch()
	{
		UObject* Outer=Z_Construct_UClass_AShooterGameMode();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FinishMatch"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("finish current match and lock players"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterGameMode_SetAllowBots()
	{
		struct ShooterGameMode_eventSetAllowBots_Parms
		{
			bool bInAllowBots;
			int32 InMaxBots;
		};
		UObject* Outer=Z_Construct_UClass_AShooterGameMode();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAllowBots"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(ShooterGameMode_eventSetAllowBots_Parms));
			UProperty* NewProp_InMaxBots = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InMaxBots"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InMaxBots, ShooterGameMode_eventSetAllowBots_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAllowBots, ShooterGameMode_eventSetAllowBots_Parms, bool);
			UProperty* NewProp_bInAllowBots = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAllowBots"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAllowBots, ShooterGameMode_eventSetAllowBots_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bInAllowBots, ShooterGameMode_eventSetAllowBots_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_InMaxBots"), TEXT("8"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterGameMode_NoRegister()
	{
		return AShooterGameMode::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterGameMode()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameMode();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterGameMode::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2080028C;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterGameMode_FinishMatch());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterGameMode_SetAllowBots());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_LevelPickups = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LevelPickups"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(LevelPickups, AShooterGameMode), 0x0000000000000000);
				UProperty* NewProp_LevelPickups_Inner = new(EC_InternalUseOnlyConstructor, NewProp_LevelPickups, TEXT("LevelPickups"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AShooterPickup_NoRegister());
				UProperty* NewProp_BotControllers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BotControllers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(BotControllers, AShooterGameMode), 0x0000080000000000);
				UProperty* NewProp_BotControllers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BotControllers, TEXT("BotControllers"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AShooterAIController_NoRegister());
				UProperty* NewProp_MaxBots = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxBots"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxBots, AShooterGameMode), 0x0000080000004000);
				UProperty* NewProp_DamageSelfScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DamageSelfScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(DamageSelfScale, AShooterGameMode), 0x0000080000004000);
				UProperty* NewProp_DeathScore = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeathScore"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(DeathScore, AShooterGameMode), 0x0000080000004000);
				UProperty* NewProp_KillScore = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KillScore"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(KillScore, AShooterGameMode), 0x0000080000004000);
				UProperty* NewProp_TimeBetweenMatches = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimeBetweenMatches"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TimeBetweenMatches, AShooterGameMode), 0x0000080000004000);
				UProperty* NewProp_RoundTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RoundTime"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RoundTime, AShooterGameMode), 0x0000080000004000);
				UProperty* NewProp_WarmupTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WarmupTime"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(WarmupTime, AShooterGameMode), 0x0000080000004000);
				UProperty* NewProp_BotPawnClass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BotPawnClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(BotPawnClass, AShooterGameMode), 0x0004000000000005, Z_Construct_UClass_APawn_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterGameMode_FinishMatch()); // 3876371404
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterGameMode_SetAllowBots()); // 2528150955
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Online/ShooterGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
				MetaData->SetValue(NewProp_LevelPickups, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_BotControllers, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_MaxBots, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_DamageSelfScale, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_DamageSelfScale, TEXT("ToolTip"), TEXT("scale for self instigated damage"));
				MetaData->SetValue(NewProp_DeathScore, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_DeathScore, TEXT("ToolTip"), TEXT("score for death"));
				MetaData->SetValue(NewProp_KillScore, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_KillScore, TEXT("ToolTip"), TEXT("score for kill"));
				MetaData->SetValue(NewProp_TimeBetweenMatches, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_RoundTime, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_RoundTime, TEXT("ToolTip"), TEXT("match duration"));
				MetaData->SetValue(NewProp_WarmupTime, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_WarmupTime, TEXT("ToolTip"), TEXT("delay between first player login and starting match"));
				MetaData->SetValue(NewProp_BotPawnClass, TEXT("Category"), TEXT("GameMode"));
				MetaData->SetValue(NewProp_BotPawnClass, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameMode.h"));
				MetaData->SetValue(NewProp_BotPawnClass, TEXT("ToolTip"), TEXT("The bot pawn class"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterGameMode(Z_Construct_UClass_AShooterGameMode, TEXT("AShooterGameMode"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterGameMode);
	UClass* Z_Construct_UClass_AShooterGame_FreeForAll_NoRegister()
	{
		return AShooterGame_FreeForAll::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterGame_FreeForAll()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AShooterGameMode();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterGame_FreeForAll::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2080028C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WinnerPlayerState = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WinnerPlayerState"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WinnerPlayerState, AShooterGame_FreeForAll), 0x0000080000002000, Z_Construct_UClass_AShooterPlayerState_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Online/ShooterGame_FreeForAll.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGame_FreeForAll.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
				MetaData->SetValue(NewProp_WinnerPlayerState, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGame_FreeForAll.h"));
				MetaData->SetValue(NewProp_WinnerPlayerState, TEXT("ToolTip"), TEXT("best player"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterGame_FreeForAll(Z_Construct_UClass_AShooterGame_FreeForAll, TEXT("AShooterGame_FreeForAll"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterGame_FreeForAll);
	UClass* Z_Construct_UClass_AShooterGame_TeamDeathMatch_NoRegister()
	{
		return AShooterGame_TeamDeathMatch::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterGame_TeamDeathMatch()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AShooterGameMode();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterGame_TeamDeathMatch::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2080028C;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Info Rendering MovementReplication Replication Actor Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Online/ShooterGame_TeamDeathMatch.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGame_TeamDeathMatch.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterGame_TeamDeathMatch(Z_Construct_UClass_AShooterGame_TeamDeathMatch, TEXT("AShooterGame_TeamDeathMatch"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterGame_TeamDeathMatch);
	UClass* Z_Construct_UClass_AShooterGameSession_NoRegister()
	{
		return AShooterGameSession::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterGameSession()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameSession();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterGameSession::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900284;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Online/ShooterGameSession.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameSession.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterGameSession(Z_Construct_UClass_AShooterGameSession, TEXT("AShooterGameSession"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterGameSession);
	UClass* Z_Construct_UClass_AShooterGameState_NoRegister()
	{
		return AShooterGameState::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterGameState()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AGameState();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterGameState::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800280;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bTimerPaused, AShooterGameState, bool);
				UProperty* NewProp_bTimerPaused = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bTimerPaused"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bTimerPaused, AShooterGameState), 0x0000000000002020, CPP_BOOL_PROPERTY_BITMASK(bTimerPaused, AShooterGameState), sizeof(bool), true);
				UProperty* NewProp_RemainingTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RemainingTime"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RemainingTime, AShooterGameState), 0x0000000000002020);
				UProperty* NewProp_TeamScores = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TeamScores"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(TeamScores, AShooterGameState), 0x0000000000002020);
				UProperty* NewProp_TeamScores_Inner = new(EC_InternalUseOnlyConstructor, NewProp_TeamScores, TEXT("TeamScores"), RF_Public|RF_Transient|RF_Native) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_NumTeams = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumTeams"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumTeams, AShooterGameState), 0x0000000000002020);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Online/ShooterGameState.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameState.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
				MetaData->SetValue(NewProp_bTimerPaused, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameState.h"));
				MetaData->SetValue(NewProp_bTimerPaused, TEXT("ToolTip"), TEXT("is timer paused?"));
				MetaData->SetValue(NewProp_RemainingTime, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameState.h"));
				MetaData->SetValue(NewProp_RemainingTime, TEXT("ToolTip"), TEXT("time left for warmup / match"));
				MetaData->SetValue(NewProp_TeamScores, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameState.h"));
				MetaData->SetValue(NewProp_TeamScores, TEXT("ToolTip"), TEXT("accumulated score per team"));
				MetaData->SetValue(NewProp_NumTeams, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterGameState.h"));
				MetaData->SetValue(NewProp_NumTeams, TEXT("ToolTip"), TEXT("number of teams in current game (doesn't deprecate when no players are left in a team)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterGameState(Z_Construct_UClass_AShooterGameState, TEXT("AShooterGameState"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterGameState);
	UClass* Z_Construct_UClass_UShooterGameUserSettings_NoRegister()
	{
		return UShooterGameUserSettings::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterGameUserSettings()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameUserSettings();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterGameUserSettings::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x60000084;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsLanMatch, UShooterGameUserSettings, bool);
				UProperty* NewProp_bIsLanMatch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsLanMatch"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsLanMatch, UShooterGameUserSettings), 0x0000000000004000, CPP_BOOL_PROPERTY_BITMASK(bIsLanMatch, UShooterGameUserSettings), sizeof(bool), true);
				UProperty* NewProp_GraphicsQuality = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GraphicsQuality"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(GraphicsQuality, UShooterGameUserSettings), 0x0000000000004000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("GameUserSettings"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ShooterGameUserSettings.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/ShooterGameUserSettings.h"));
				MetaData->SetValue(NewProp_bIsLanMatch, TEXT("ModuleRelativePath"), TEXT("Public/ShooterGameUserSettings.h"));
				MetaData->SetValue(NewProp_bIsLanMatch, TEXT("ToolTip"), TEXT("is lan match?"));
				MetaData->SetValue(NewProp_GraphicsQuality, TEXT("ModuleRelativePath"), TEXT("Public/ShooterGameUserSettings.h"));
				MetaData->SetValue(NewProp_GraphicsQuality, TEXT("ToolTip"), TEXT("Graphics Quality\n     0 = Low\n     1 = High"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterGameUserSettings(Z_Construct_UClass_UShooterGameUserSettings, TEXT("UShooterGameUserSettings"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterGameUserSettings);
	UClass* Z_Construct_UClass_UShooterGameViewportClient_NoRegister()
	{
		return UShooterGameViewportClient::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterGameViewportClient()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UGameViewportClient();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterGameViewportClient::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000088;


				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ShooterGameViewportClient.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/ShooterGameViewportClient.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterGameViewportClient(Z_Construct_UClass_UShooterGameViewportClient, TEXT("UShooterGameViewportClient"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterGameViewportClient);
	UClass* Z_Construct_UClass_AShooterHUD_NoRegister()
	{
		return AShooterHUD::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterHUD()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AHUD();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterHUD::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2080028C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_NormalFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(NormalFont, AShooterHUD), 0x0000080000000000, Z_Construct_UClass_UFont_NoRegister());
				UProperty* NewProp_BigFont = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BigFont"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BigFont, AShooterHUD), 0x0000080000000000, Z_Construct_UClass_UFont_NoRegister());
				UProperty* NewProp_LowHealthOverlayTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LowHealthOverlayTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(LowHealthOverlayTexture, AShooterHUD), 0x0000080000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_HUDAssets02Texture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HUDAssets02Texture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HUDAssets02Texture, AShooterHUD), 0x0000080000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_HUDMainTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HUDMainTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HUDMainTexture, AShooterHUD), 0x0000080000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_HitNotifyTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HitNotifyTexture"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(HitNotifyTexture, AShooterHUD), 0x0000080000000000, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_PlaceIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlaceIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlaceIcon, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_TimerIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimerIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TimerIcon, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_KilledIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KilledIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(KilledIcon, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_KillsIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KillsIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(KillsIcon, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_HealthIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HealthIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HealthIcon, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_HealthBar = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HealthBar"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HealthBar, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_HealthBarBg = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HealthBarBg"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HealthBarBg, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_DeathMessagesBg = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DeathMessagesBg"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DeathMessagesBg, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_HitNotifyCrosshair = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HitNotifyCrosshair"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitNotifyCrosshair, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_Crosshair = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Crosshair"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Crosshair, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				NewProp_Crosshair->ArrayDim = CPP_ARRAY_DIM(Crosshair, AShooterHUD);
				UProperty* NewProp_SecondaryWeapBg = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecondaryWeapBg"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SecondaryWeapBg, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_PrimaryWeapBg = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryWeapBg"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PrimaryWeapBg, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_TimePlaceBg = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TimePlaceBg"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(TimePlaceBg, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_KillsBg = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("KillsBg"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(KillsBg, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_HitNotifyIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HitNotifyIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitNotifyIcon, AShooterHUD), 0x0000080000000000, Z_Construct_UScriptStruct_FCanvasIcon());
				NewProp_HitNotifyIcon->ArrayDim = CPP_ARRAY_DIM(HitNotifyIcon, AShooterHUD);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Rendering Actor Input Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UI/ShooterHUD.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
				MetaData->SetValue(NewProp_NormalFont, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_NormalFont, TEXT("ToolTip"), TEXT("Normal font - used for death messages and such."));
				MetaData->SetValue(NewProp_BigFont, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_BigFont, TEXT("ToolTip"), TEXT("Large font - used for ammo display etc."));
				MetaData->SetValue(NewProp_LowHealthOverlayTexture, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_LowHealthOverlayTexture, TEXT("ToolTip"), TEXT("Overlay shown when health is low."));
				MetaData->SetValue(NewProp_HUDAssets02Texture, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_HUDAssets02Texture, TEXT("ToolTip"), TEXT("Texture for HUD elements."));
				MetaData->SetValue(NewProp_HUDMainTexture, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_HUDMainTexture, TEXT("ToolTip"), TEXT("texture for HUD elements."));
				MetaData->SetValue(NewProp_HitNotifyTexture, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_HitNotifyTexture, TEXT("ToolTip"), TEXT("Texture for hit indicator."));
				MetaData->SetValue(NewProp_PlaceIcon, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_PlaceIcon, TEXT("ToolTip"), TEXT("Podium icon."));
				MetaData->SetValue(NewProp_TimerIcon, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_TimerIcon, TEXT("ToolTip"), TEXT("Timer icon."));
				MetaData->SetValue(NewProp_KilledIcon, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_KilledIcon, TEXT("ToolTip"), TEXT("Bigger killed icon."));
				MetaData->SetValue(NewProp_KillsIcon, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_KillsIcon, TEXT("ToolTip"), TEXT("Kills icon."));
				MetaData->SetValue(NewProp_HealthIcon, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_HealthIcon, TEXT("ToolTip"), TEXT("Health icon on the health bar."));
				MetaData->SetValue(NewProp_HealthBar, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_HealthBar, TEXT("ToolTip"), TEXT("Health bar icon."));
				MetaData->SetValue(NewProp_HealthBarBg, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_HealthBarBg, TEXT("ToolTip"), TEXT("Health bar background icon."));
				MetaData->SetValue(NewProp_DeathMessagesBg, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_DeathMessagesBg, TEXT("ToolTip"), TEXT("Death messages background icon."));
				MetaData->SetValue(NewProp_HitNotifyCrosshair, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_HitNotifyCrosshair, TEXT("ToolTip"), TEXT("On crosshair indicator that we hit someone."));
				MetaData->SetValue(NewProp_Crosshair, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_Crosshair, TEXT("ToolTip"), TEXT("Crosshair icons (left, top, right, bottom and center)."));
				MetaData->SetValue(NewProp_SecondaryWeapBg, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_SecondaryWeapBg, TEXT("ToolTip"), TEXT("Secondary weapon background icon"));
				MetaData->SetValue(NewProp_PrimaryWeapBg, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_PrimaryWeapBg, TEXT("ToolTip"), TEXT("Primary weapon background icon."));
				MetaData->SetValue(NewProp_TimePlaceBg, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_TimePlaceBg, TEXT("ToolTip"), TEXT("Match timer and player position background icon."));
				MetaData->SetValue(NewProp_KillsBg, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_KillsBg, TEXT("ToolTip"), TEXT("kills background icon."));
				MetaData->SetValue(NewProp_HitNotifyIcon, TEXT("ModuleRelativePath"), TEXT("Public/UI/ShooterHUD.h"));
				MetaData->SetValue(NewProp_HitNotifyIcon, TEXT("ToolTip"), TEXT("Icons for hit indicator."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterHUD(Z_Construct_UClass_AShooterHUD, TEXT("AShooterHUD"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterHUD);
	UClass* Z_Construct_UClass_AShooterImpactEffect_NoRegister()
	{
		return AShooterImpactEffect::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterImpactEffect()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterImpactEffect::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SurfaceHit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SurfaceHit"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SurfaceHit, AShooterImpactEffect), 0x0000008000000014, Z_Construct_UScriptStruct_FHitResult());
				UProperty* NewProp_DefaultDecal = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultDecal"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DefaultDecal, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UScriptStruct_FDecalData());
				UProperty* NewProp_FleshSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FleshSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FleshSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_GrassSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrassSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GrassSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_GlassSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlassSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GlassSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_WoodSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WoodSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WoodSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_MetalSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MetalSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MetalSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_WaterSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WaterSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WaterSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_DirtSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DirtSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DirtSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_ConcreteSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConcreteSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ConcreteSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_DefaultSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultSound, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_FleshFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FleshFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FleshFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_GrassFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GrassFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GrassFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_GlassFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GlassFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(GlassFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_WoodFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WoodFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WoodFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_MetalFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MetalFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MetalFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_WaterFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WaterFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WaterFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_DirtFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DirtFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DirtFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_ConcreteFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ConcreteFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ConcreteFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_DefaultFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(DefaultFX, AShooterImpactEffect), 0x0000000000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Spawnable effect for weapon hit impact - NOT replicated to clients\nEach impact type should be defined as separate blueprint"));
				MetaData->SetValue(NewProp_SurfaceHit, TEXT("Category"), TEXT("Surface"));
				MetaData->SetValue(NewProp_SurfaceHit, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_SurfaceHit, TEXT("ToolTip"), TEXT("surface data for spawning"));
				MetaData->SetValue(NewProp_DefaultDecal, TEXT("Category"), TEXT("Defaults"));
				MetaData->SetValue(NewProp_DefaultDecal, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_DefaultDecal, TEXT("ToolTip"), TEXT("default decal when material specific override doesn't exist"));
				MetaData->SetValue(NewProp_FleshSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_FleshSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_FleshSound, TEXT("ToolTip"), TEXT("impact FX on flesh"));
				MetaData->SetValue(NewProp_GrassSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_GrassSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_GrassSound, TEXT("ToolTip"), TEXT("impact FX on grass"));
				MetaData->SetValue(NewProp_GlassSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_GlassSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_GlassSound, TEXT("ToolTip"), TEXT("impact FX on glass"));
				MetaData->SetValue(NewProp_WoodSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_WoodSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_WoodSound, TEXT("ToolTip"), TEXT("impact FX on wood"));
				MetaData->SetValue(NewProp_MetalSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_MetalSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_MetalSound, TEXT("ToolTip"), TEXT("impact FX on metal"));
				MetaData->SetValue(NewProp_WaterSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_WaterSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_WaterSound, TEXT("ToolTip"), TEXT("impact FX on water"));
				MetaData->SetValue(NewProp_DirtSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_DirtSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_DirtSound, TEXT("ToolTip"), TEXT("impact FX on dirt"));
				MetaData->SetValue(NewProp_ConcreteSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_ConcreteSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_ConcreteSound, TEXT("ToolTip"), TEXT("impact FX on concrete"));
				MetaData->SetValue(NewProp_DefaultSound, TEXT("Category"), TEXT("Defaults"));
				MetaData->SetValue(NewProp_DefaultSound, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_DefaultSound, TEXT("ToolTip"), TEXT("default impact sound used when material specific override doesn't exist"));
				MetaData->SetValue(NewProp_FleshFX, TEXT("Category"), TEXT("Visual"));
				MetaData->SetValue(NewProp_FleshFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_FleshFX, TEXT("ToolTip"), TEXT("impact FX on flesh"));
				MetaData->SetValue(NewProp_GrassFX, TEXT("Category"), TEXT("Visual"));
				MetaData->SetValue(NewProp_GrassFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_GrassFX, TEXT("ToolTip"), TEXT("impact FX on grass"));
				MetaData->SetValue(NewProp_GlassFX, TEXT("Category"), TEXT("Visual"));
				MetaData->SetValue(NewProp_GlassFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_GlassFX, TEXT("ToolTip"), TEXT("impact FX on glass"));
				MetaData->SetValue(NewProp_WoodFX, TEXT("Category"), TEXT("Visual"));
				MetaData->SetValue(NewProp_WoodFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_WoodFX, TEXT("ToolTip"), TEXT("impact FX on wood"));
				MetaData->SetValue(NewProp_MetalFX, TEXT("Category"), TEXT("Visual"));
				MetaData->SetValue(NewProp_MetalFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_MetalFX, TEXT("ToolTip"), TEXT("impact FX on metal"));
				MetaData->SetValue(NewProp_WaterFX, TEXT("Category"), TEXT("Visual"));
				MetaData->SetValue(NewProp_WaterFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_WaterFX, TEXT("ToolTip"), TEXT("impact FX on water"));
				MetaData->SetValue(NewProp_DirtFX, TEXT("Category"), TEXT("Visual"));
				MetaData->SetValue(NewProp_DirtFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_DirtFX, TEXT("ToolTip"), TEXT("impact FX on dirt"));
				MetaData->SetValue(NewProp_ConcreteFX, TEXT("Category"), TEXT("Visual"));
				MetaData->SetValue(NewProp_ConcreteFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_ConcreteFX, TEXT("ToolTip"), TEXT("impact FX on concrete"));
				MetaData->SetValue(NewProp_DefaultFX, TEXT("Category"), TEXT("Defaults"));
				MetaData->SetValue(NewProp_DefaultFX, TEXT("ModuleRelativePath"), TEXT("Public/Effects/ShooterImpactEffect.h"));
				MetaData->SetValue(NewProp_DefaultFX, TEXT("ToolTip"), TEXT("default impact FX used when material specific override doesn't exist"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterImpactEffect(Z_Construct_UClass_AShooterImpactEffect, TEXT("AShooterImpactEffect"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterImpactEffect);
	UClass* Z_Construct_UClass_UShooterPersistentUser_NoRegister()
	{
		return UShooterPersistentUser::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterPersistentUser()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USaveGame();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterPersistentUser::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20000080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInvertedYAxis, UShooterPersistentUser, bool);
				UProperty* NewProp_bInvertedYAxis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInvertedYAxis"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInvertedYAxis, UShooterPersistentUser), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bInvertedYAxis, UShooterPersistentUser), sizeof(bool), true);
				UProperty* NewProp_AimSensitivity = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AimSensitivity"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AimSensitivity, UShooterPersistentUser), 0x0000080000000000);
				UProperty* NewProp_Gamma = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Gamma"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Gamma, UShooterPersistentUser), 0x0000080000000000);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsRecordingDemos, UShooterPersistentUser, bool);
				UProperty* NewProp_bIsRecordingDemos = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsRecordingDemos"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsRecordingDemos, UShooterPersistentUser), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bIsRecordingDemos, UShooterPersistentUser), sizeof(bool), true);
				UProperty* NewProp_BotsCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BotsCount"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(BotsCount, UShooterPersistentUser), 0x0000080000000000);
				UProperty* NewProp_RocketsFired = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RocketsFired"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RocketsFired, UShooterPersistentUser), 0x0000080000000000);
				UProperty* NewProp_BulletsFired = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BulletsFired"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(BulletsFired, UShooterPersistentUser), 0x0000080000000000);
				UProperty* NewProp_Losses = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Losses"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Losses, UShooterPersistentUser), 0x0000080000000000);
				UProperty* NewProp_Wins = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Wins"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Wins, UShooterPersistentUser), 0x0000080000000000);
				UProperty* NewProp_Deaths = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Deaths"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Deaths, UShooterPersistentUser), 0x0000080000000000);
				UProperty* NewProp_Kills = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Kills"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Kills, UShooterPersistentUser), 0x0000080000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterPersistentUser.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_bInvertedYAxis, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_bInvertedYAxis, TEXT("ToolTip"), TEXT("Is the y axis inverted or not?"));
				MetaData->SetValue(NewProp_AimSensitivity, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_AimSensitivity, TEXT("ToolTip"), TEXT("Holds the mouse sensitivity"));
				MetaData->SetValue(NewProp_Gamma, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_Gamma, TEXT("ToolTip"), TEXT("Holds the gamma correction setting"));
				MetaData->SetValue(NewProp_bIsRecordingDemos, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_bIsRecordingDemos, TEXT("ToolTip"), TEXT("is recording demos?"));
				MetaData->SetValue(NewProp_BotsCount, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_BotsCount, TEXT("ToolTip"), TEXT("how many bots join hosted game"));
				MetaData->SetValue(NewProp_RocketsFired, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_RocketsFired, TEXT("ToolTip"), TEXT("Lifetime count of rockets fired"));
				MetaData->SetValue(NewProp_BulletsFired, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_BulletsFired, TEXT("ToolTip"), TEXT("Lifetime count of bullets fired"));
				MetaData->SetValue(NewProp_Losses, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_Losses, TEXT("ToolTip"), TEXT("Lifetime count of match losses"));
				MetaData->SetValue(NewProp_Wins, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_Wins, TEXT("ToolTip"), TEXT("Lifetime count of match wins"));
				MetaData->SetValue(NewProp_Deaths, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_Deaths, TEXT("ToolTip"), TEXT("Lifetime count of deaths"));
				MetaData->SetValue(NewProp_Kills, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPersistentUser.h"));
				MetaData->SetValue(NewProp_Kills, TEXT("ToolTip"), TEXT("Lifetime count of kills"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterPersistentUser(Z_Construct_UClass_UShooterPersistentUser, TEXT("UShooterPersistentUser"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterPersistentUser);
	UClass* Z_Construct_UClass_UShooterLocalPlayer_NoRegister()
	{
		return UShooterLocalPlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterLocalPlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ULocalPlayer();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterLocalPlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x2000008C;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PersistentUser = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PersistentUser"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PersistentUser, UShooterLocalPlayer), 0x0000000000000000, Z_Construct_UClass_UShooterPersistentUser_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterLocalPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterLocalPlayer.h"));
				MetaData->SetValue(NewProp_PersistentUser, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterLocalPlayer.h"));
				MetaData->SetValue(NewProp_PersistentUser, TEXT("ToolTip"), TEXT("Persistent user data stored between sessions (i.e. the user's savegame)"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterLocalPlayer(Z_Construct_UClass_UShooterLocalPlayer, TEXT("UShooterLocalPlayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterLocalPlayer);
	UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuItemStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShooterMenuItemStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FShooterMenuItemStyle>, EStructFlags(0x00000001));
			UProperty* NewProp_RightArrowImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RightArrowImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RightArrowImage, FShooterMenuItemStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_LeftArrowImage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeftArrowImage"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LeftArrowImage, FShooterMenuItemStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_BackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(BackgroundBrush, FShooterMenuItemStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an FShooterMenuItem"));
			MetaData->SetValue(NewProp_RightArrowImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_RightArrowImage, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuItemWidgetStyle.h"));
			MetaData->SetValue(NewProp_RightArrowImage, TEXT("ToolTip"), TEXT("The image used for the right arrow"));
			MetaData->SetValue(NewProp_LeftArrowImage, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_LeftArrowImage, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuItemWidgetStyle.h"));
			MetaData->SetValue(NewProp_LeftArrowImage, TEXT("ToolTip"), TEXT("The image used for the left arrow"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuItemWidgetStyle.h"));
			MetaData->SetValue(NewProp_BackgroundBrush, TEXT("ToolTip"), TEXT("The brush used for the item background"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FShooterMenuItemStyle_CRC() { return 2160244822U; }
	UClass* Z_Construct_UClass_UShooterMenuItemWidgetStyle_NoRegister()
	{
		return UShooterMenuItemWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterMenuItemWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterMenuItemWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MenuItemStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MenuItemStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuItemStyle, UShooterMenuItemWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FShooterMenuItemStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UI/Style/ShooterMenuItemWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuItemWidgetStyle.h"));
				MetaData->SetValue(NewProp_MenuItemStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_MenuItemStyle, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuItemWidgetStyle.h"));
				MetaData->SetValue(NewProp_MenuItemStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_MenuItemStyle, TEXT("ToolTip"), TEXT("The actual data describing the menu's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterMenuItemWidgetStyle(Z_Construct_UClass_UShooterMenuItemWidgetStyle, TEXT("UShooterMenuItemWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterMenuItemWidgetStyle);
	UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuSoundsStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShooterMenuSoundsStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FShooterMenuSoundsStyle>, EStructFlags(0x00000001));
			UProperty* NewProp_ExitGameSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExitGameSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ExitGameSound, FShooterMenuSoundsStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_StartGameSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StartGameSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(StartGameSound, FShooterMenuSoundsStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the common menu sounds used in the shooter game"));
			MetaData->SetValue(NewProp_ExitGameSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_ExitGameSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuSoundsWidgetStyle.h"));
			MetaData->SetValue(NewProp_ExitGameSound, TEXT("ToolTip"), TEXT("The sound that should play when exiting the game"));
			MetaData->SetValue(NewProp_StartGameSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_StartGameSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuSoundsWidgetStyle.h"));
			MetaData->SetValue(NewProp_StartGameSound, TEXT("ToolTip"), TEXT("The sound that should play when starting the game"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FShooterMenuSoundsStyle_CRC() { return 3767867278U; }
	UClass* Z_Construct_UClass_UShooterMenuSoundsWidgetStyle_NoRegister()
	{
		return UShooterMenuSoundsWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterMenuSoundsWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterMenuSoundsWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SoundsStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundsStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SoundsStyle, UShooterMenuSoundsWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FShooterMenuSoundsStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UI/Style/ShooterMenuSoundsWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuSoundsWidgetStyle.h"));
				MetaData->SetValue(NewProp_SoundsStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_SoundsStyle, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuSoundsWidgetStyle.h"));
				MetaData->SetValue(NewProp_SoundsStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_SoundsStyle, TEXT("ToolTip"), TEXT("The actual data describing the sounds"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterMenuSoundsWidgetStyle(Z_Construct_UClass_UShooterMenuSoundsWidgetStyle, TEXT("UShooterMenuSoundsWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterMenuSoundsWidgetStyle);
	UScriptStruct* Z_Construct_UScriptStruct_FShooterMenuStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShooterMenuStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FShooterMenuStyle>, EStructFlags(0x00000001));
			UProperty* NewProp_MenuItemChangeSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuItemChangeSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuItemChangeSound, FShooterMenuStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_OptionChangeSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("OptionChangeSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OptionChangeSound, FShooterMenuStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_MenuBackSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuBackSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuBackSound, FShooterMenuStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_MenuEnterSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MenuEnterSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuEnterSound, FShooterMenuStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_RightBackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RightBackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(RightBackgroundBrush, FShooterMenuStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_LeftBackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("LeftBackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(LeftBackgroundBrush, FShooterMenuStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			UProperty* NewProp_HeaderBackgroundBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HeaderBackgroundBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HeaderBackgroundBrush, FShooterMenuStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SShooterMenuWidget"));
			MetaData->SetValue(NewProp_MenuItemChangeSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_MenuItemChangeSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
			MetaData->SetValue(NewProp_MenuItemChangeSound, TEXT("ToolTip"), TEXT("The sound that should play when changing the selected menu item"));
			MetaData->SetValue(NewProp_OptionChangeSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_OptionChangeSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
			MetaData->SetValue(NewProp_OptionChangeSound, TEXT("ToolTip"), TEXT("The sound that should play when changing an option"));
			MetaData->SetValue(NewProp_MenuBackSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_MenuBackSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
			MetaData->SetValue(NewProp_MenuBackSound, TEXT("ToolTip"), TEXT("The sound that should play when leaving a sub-menu"));
			MetaData->SetValue(NewProp_MenuEnterSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_MenuEnterSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
			MetaData->SetValue(NewProp_MenuEnterSound, TEXT("ToolTip"), TEXT("The sound that should play when entering a sub-menu"));
			MetaData->SetValue(NewProp_RightBackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_RightBackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
			MetaData->SetValue(NewProp_RightBackgroundBrush, TEXT("ToolTip"), TEXT("The brush used for the right side of the menu"));
			MetaData->SetValue(NewProp_LeftBackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_LeftBackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
			MetaData->SetValue(NewProp_LeftBackgroundBrush, TEXT("ToolTip"), TEXT("The brush used for the left side of the menu"));
			MetaData->SetValue(NewProp_HeaderBackgroundBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_HeaderBackgroundBrush, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
			MetaData->SetValue(NewProp_HeaderBackgroundBrush, TEXT("ToolTip"), TEXT("The brush used for the header background"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FShooterMenuStyle_CRC() { return 1334405616U; }
	UClass* Z_Construct_UClass_UShooterMenuWidgetStyle_NoRegister()
	{
		return UShooterMenuWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterMenuWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterMenuWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_MenuStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MenuStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(MenuStyle, UShooterMenuWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FShooterMenuStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UI/Style/ShooterMenuWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
				MetaData->SetValue(NewProp_MenuStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_MenuStyle, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterMenuWidgetStyle.h"));
				MetaData->SetValue(NewProp_MenuStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_MenuStyle, TEXT("ToolTip"), TEXT("The actual data describing the menu's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterMenuWidgetStyle(Z_Construct_UClass_UShooterMenuWidgetStyle, TEXT("UShooterMenuWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterMenuWidgetStyle);
	UScriptStruct* Z_Construct_UScriptStruct_FShooterOptionsStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShooterOptionsStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FShooterOptionsStyle>, EStructFlags(0x00000001));
			UProperty* NewProp_DiscardChangesSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DiscardChangesSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DiscardChangesSound, FShooterOptionsStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_AcceptChangesSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AcceptChangesSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AcceptChangesSound, FShooterOptionsStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an FShooterOptions"));
			MetaData->SetValue(NewProp_DiscardChangesSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_DiscardChangesSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterOptionsWidgetStyle.h"));
			MetaData->SetValue(NewProp_DiscardChangesSound, TEXT("ToolTip"), TEXT("The sound the options should play when changes are discarded"));
			MetaData->SetValue(NewProp_AcceptChangesSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_AcceptChangesSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterOptionsWidgetStyle.h"));
			MetaData->SetValue(NewProp_AcceptChangesSound, TEXT("ToolTip"), TEXT("The sound the options should play when changes are accepted"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FShooterOptionsStyle_CRC() { return 1620717552U; }
	UClass* Z_Construct_UClass_UShooterOptionsWidgetStyle_NoRegister()
	{
		return UShooterOptionsWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterOptionsWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterOptionsWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_OptionsStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OptionsStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(OptionsStyle, UShooterOptionsWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FShooterOptionsStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UI/Style/ShooterOptionsWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterOptionsWidgetStyle.h"));
				MetaData->SetValue(NewProp_OptionsStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_OptionsStyle, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterOptionsWidgetStyle.h"));
				MetaData->SetValue(NewProp_OptionsStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_OptionsStyle, TEXT("ToolTip"), TEXT("The actual data describing the menu's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterOptionsWidgetStyle(Z_Construct_UClass_UShooterOptionsWidgetStyle, TEXT("UShooterOptionsWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterOptionsWidgetStyle);
	UFunction* Z_Construct_UFunction_AShooterPickup_OnPickedUpEvent()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPickup();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnPickedUpEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("blueprint event: pickup disappears"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPickup_OnRep_IsActive()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPickup();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_IsActive"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPickup_OnRespawnEvent()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPickup();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRespawnEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x08080800, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("blueprint event: pickup appears"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterPickup_NoRegister()
	{
		return AShooterPickup::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterPickup()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterPickup::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPickup_OnPickedUpEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPickup_OnRep_IsActive());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPickup_OnRespawnEvent());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PickedUpBy = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PickedUpBy"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PickedUpBy, AShooterPickup), 0x0000080000002020, Z_Construct_UClass_AShooterCharacter_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsActive, AShooterPickup, uint8);
				UProperty* NewProp_bIsActive = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsActive"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsActive, AShooterPickup), 0x0000080100002020, CPP_BOOL_PROPERTY_BITMASK(bIsActive, AShooterPickup), sizeof(uint8), false);
				NewProp_bIsActive->RepNotifyFunc = FName(TEXT("OnRep_IsActive"));
				UProperty* NewProp_RespawnTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RespawnTime"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RespawnTime, AShooterPickup), 0x0000080000010001);
				UProperty* NewProp_RespawnSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RespawnSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RespawnSound, AShooterPickup), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_PickupSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PickupSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PickupSound, AShooterPickup), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_RespawningFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RespawningFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RespawningFX, AShooterPickup), 0x0000080000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_ActiveFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ActiveFX, AShooterPickup), 0x0000080000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_PickupPSC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PickupPSC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(PickupPSC, AShooterPickup), 0x00000000000b0009, Z_Construct_UClass_UParticleSystemComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPickup_OnPickedUpEvent()); // 1201599216
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPickup_OnRep_IsActive()); // 1666935701
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPickup_OnRespawnEvent()); // 274042081
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Pickups/ShooterPickup.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for pickup objects that can be placed in the world"));
				MetaData->SetValue(NewProp_PickedUpBy, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(NewProp_PickedUpBy, TEXT("ToolTip"), TEXT("The character who has picked up this pickup"));
				MetaData->SetValue(NewProp_bIsActive, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(NewProp_bIsActive, TEXT("ToolTip"), TEXT("is it ready for interactions?"));
				MetaData->SetValue(NewProp_RespawnTime, TEXT("Category"), TEXT("Pickup"));
				MetaData->SetValue(NewProp_RespawnTime, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(NewProp_RespawnTime, TEXT("ToolTip"), TEXT("how long it takes to respawn?"));
				MetaData->SetValue(NewProp_RespawnSound, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_RespawnSound, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(NewProp_RespawnSound, TEXT("ToolTip"), TEXT("sound played on respawn"));
				MetaData->SetValue(NewProp_PickupSound, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_PickupSound, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(NewProp_PickupSound, TEXT("ToolTip"), TEXT("sound played when player picks it up"));
				MetaData->SetValue(NewProp_RespawningFX, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_RespawningFX, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(NewProp_RespawningFX, TEXT("ToolTip"), TEXT("FX of pickup on respawn timer"));
				MetaData->SetValue(NewProp_ActiveFX, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_ActiveFX, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(NewProp_ActiveFX, TEXT("ToolTip"), TEXT("FX of active pickup"));
				MetaData->SetValue(NewProp_PickupPSC, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_PickupPSC, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_PickupPSC, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup.h"));
				MetaData->SetValue(NewProp_PickupPSC, TEXT("ToolTip"), TEXT("FX component"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterPickup(Z_Construct_UClass_AShooterPickup, TEXT("AShooterPickup"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterPickup);
	UClass* Z_Construct_UClass_AShooterPickup_Ammo_NoRegister()
	{
		return AShooterPickup_Ammo::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterPickup_Ammo()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AShooterPickup();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterPickup_Ammo::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_WeaponType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeaponType"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(WeaponType, AShooterPickup_Ammo), 0x0004080000010001, Z_Construct_UClass_AShooterWeapon_NoRegister());
				UProperty* NewProp_AmmoClips = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmmoClips"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AmmoClips, AShooterPickup_Ammo), 0x0000080000010001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Pickups/ShooterPickup_Ammo.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup_Ammo.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A pickup object that replenishes ammunition for a weapon"));
				MetaData->SetValue(NewProp_WeaponType, TEXT("Category"), TEXT("Pickup"));
				MetaData->SetValue(NewProp_WeaponType, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup_Ammo.h"));
				MetaData->SetValue(NewProp_WeaponType, TEXT("ToolTip"), TEXT("which weapon gets ammo?"));
				MetaData->SetValue(NewProp_AmmoClips, TEXT("Category"), TEXT("Pickup"));
				MetaData->SetValue(NewProp_AmmoClips, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup_Ammo.h"));
				MetaData->SetValue(NewProp_AmmoClips, TEXT("ToolTip"), TEXT("how much ammo does it give?"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterPickup_Ammo(Z_Construct_UClass_AShooterPickup_Ammo, TEXT("AShooterPickup_Ammo"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterPickup_Ammo);
	UClass* Z_Construct_UClass_AShooterPickup_Health_NoRegister()
	{
		return AShooterPickup_Health::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterPickup_Health()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AShooterPickup();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterPickup_Health::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Health = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Health"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Health, AShooterPickup_Health), 0x0000080000010001);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Pickups/ShooterPickup_Health.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup_Health.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A pickup object that replenishes character health"));
				MetaData->SetValue(NewProp_Health, TEXT("Category"), TEXT("Pickup"));
				MetaData->SetValue(NewProp_Health, TEXT("ModuleRelativePath"), TEXT("Public/Pickups/ShooterPickup_Health.h"));
				MetaData->SetValue(NewProp_Health, TEXT("ToolTip"), TEXT("how much health does it give?"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterPickup_Health(Z_Construct_UClass_AShooterPickup_Health, TEXT("AShooterPickup_Health"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterPickup_Health);
	UClass* Z_Construct_UClass_AShooterPlayerCameraManager_NoRegister()
	{
		return AShooterPlayerCameraManager::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterPlayerCameraManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerCameraManager();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterPlayerCameraManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800288;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterPlayerCameraManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerCameraManager.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterPlayerCameraManager(Z_Construct_UClass_AShooterPlayerCameraManager, TEXT("AShooterPlayerCameraManager"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterPlayerCameraManager);
	UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientEndOnlineGame()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientEndOnlineGame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01020CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Ends the online game using the session name in the PlayerState"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientGameStarted()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientGameStarted"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01020CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("notify player about started match"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientSendRoundEndEvent()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientSendRoundEndEvent"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01020CC0, 65535, sizeof(ShooterPlayerController_eventClientSendRoundEndEvent_Parms));
			UProperty* NewProp_ExpendedTimeInSeconds = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ExpendedTimeInSeconds"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ExpendedTimeInSeconds, ShooterPlayerController_eventClientSendRoundEndEvent_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsWinner, ShooterPlayerController_eventClientSendRoundEndEvent_Parms, bool);
			UProperty* NewProp_bIsWinner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bIsWinner"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsWinner, ShooterPlayerController_eventClientSendRoundEndEvent_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bIsWinner, ShooterPlayerController_eventClientSendRoundEndEvent_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Notifies clients to send the end-of-round event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientSetSpectatorCamera()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientSetSpectatorCamera"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01820CC0, 65535, sizeof(ShooterPlayerController_eventClientSetSpectatorCamera_Parms));
			UProperty* NewProp_CameraRotation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CameraRotation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CameraRotation, ShooterPlayerController_eventClientSetSpectatorCamera_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FRotator());
			UProperty* NewProp_CameraLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CameraLocation"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CameraLocation, ShooterPlayerController_eventClientSetSpectatorCamera_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("sets spectator location and rotation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_ClientStartOnlineGame()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientStartOnlineGame"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01020CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Starts the online game using the session name in the PlayerState"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_Say()
	{
		struct ShooterPlayerController_eventSay_Parms
		{
			FString Msg;
		};
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Say"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020600, 65535, sizeof(ShooterPlayerController_eventSay_Parms));
			UProperty* NewProp_Msg = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Msg"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Msg, ShooterPlayerController_eventSay_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Local function say a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_ServerCheat()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerCheat"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220CC0, 65535, sizeof(ShooterPlayerController_eventServerCheat_Parms));
			UProperty* NewProp_Msg = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Msg"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Msg, ShooterPlayerController_eventServerCheat_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("sends cheat message"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_ServerSay()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSay"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80220C40, 65535, sizeof(ShooterPlayerController_eventServerSay_Parms));
			UProperty* NewProp_Msg = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Msg"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(Msg, ShooterPlayerController_eventServerSay_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("RPC for clients to talk to server"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_ServerSuicide()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerSuicide"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Notifies the server that the client has suicided"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_SetGodMode()
	{
		struct ShooterPlayerController_eventSetGodMode_Parms
		{
			bool bEnable;
		};
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGodMode"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020601, 65535, sizeof(ShooterPlayerController_eventSetGodMode_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnable, ShooterPlayerController_eventSetGodMode_Parms, bool);
			UProperty* NewProp_bEnable = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bEnable"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnable, ShooterPlayerController_eventSetGodMode_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bEnable, ShooterPlayerController_eventSetGodMode_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("set god mode cheat"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_SimulateInputKey()
	{
		struct ShooterPlayerController_eventSimulateInputKey_Parms
		{
			FKey Key;
			bool bPressed;
		};
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SimulateInputKey"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(ShooterPlayerController_eventSimulateInputKey_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPressed, ShooterPlayerController_eventSimulateInputKey_Parms, bool);
			UProperty* NewProp_bPressed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bPressed"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPressed, ShooterPlayerController_eventSimulateInputKey_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bPressed, ShooterPlayerController_eventSimulateInputKey_Parms), sizeof(bool), true);
			UProperty* NewProp_Key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Key"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Key, ShooterPlayerController_eventSimulateInputKey_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKey());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bPressed"), TEXT("true"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("used for input simulation from blueprint (for automatic perf tests)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerController_Suicide()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerController();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Suicide"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080600, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Causes the player to commit suicide"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterPlayerController_NoRegister()
	{
		return AShooterPlayerController::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterPlayerController()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerController();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterPlayerController::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800284;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_ClientEndOnlineGame());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_ClientGameStarted());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_ClientSendRoundEndEvent());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_ClientSetSpectatorCamera());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_ClientStartOnlineGame());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_Say());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_ServerCheat());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_ServerSay());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_ServerSuicide());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_SetGodMode());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_SimulateInputKey());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerController_Suicide());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bGodMode, AShooterPlayerController, uint8);
				UProperty* NewProp_bGodMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bGodMode"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bGodMode, AShooterPlayerController), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bGodMode, AShooterPlayerController), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHealthRegen, AShooterPlayerController, uint8);
				UProperty* NewProp_bHealthRegen = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHealthRegen"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHealthRegen, AShooterPlayerController), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bHealthRegen, AShooterPlayerController), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteClip, AShooterPlayerController, uint8);
				UProperty* NewProp_bInfiniteClip = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInfiniteClip"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteClip, AShooterPlayerController), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bInfiniteClip, AShooterPlayerController), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteAmmo, AShooterPlayerController, uint8);
				UProperty* NewProp_bInfiniteAmmo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInfiniteAmmo"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteAmmo, AShooterPlayerController), 0x0000080000002020, CPP_BOOL_PROPERTY_BITMASK(bInfiniteAmmo, AShooterPlayerController), sizeof(uint8), false);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_ClientEndOnlineGame()); // 1012041962
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_ClientGameStarted()); // 2266603464
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_ClientSendRoundEndEvent()); // 626221971
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_ClientSetSpectatorCamera()); // 1774995686
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_ClientStartOnlineGame()); // 835987129
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_Say()); // 3553228623
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_ServerCheat()); // 569085949
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_ServerSay()); // 789152459
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_ServerSuicide()); // 3932893958
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_SetGodMode()); // 3170224859
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_SimulateInputKey()); // 4178154899
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerController_Suicide()); // 4141746420
				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterPlayerController.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
				MetaData->SetValue(NewProp_bGodMode, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
				MetaData->SetValue(NewProp_bGodMode, TEXT("ToolTip"), TEXT("god mode cheat"));
				MetaData->SetValue(NewProp_bHealthRegen, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
				MetaData->SetValue(NewProp_bHealthRegen, TEXT("ToolTip"), TEXT("health regen cheat"));
				MetaData->SetValue(NewProp_bInfiniteClip, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
				MetaData->SetValue(NewProp_bInfiniteClip, TEXT("ToolTip"), TEXT("infinite clip cheat"));
				MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController.h"));
				MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("ToolTip"), TEXT("infinite ammo cheat"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterPlayerController(Z_Construct_UClass_AShooterPlayerController, TEXT("AShooterPlayerController"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterPlayerController);
	UClass* Z_Construct_UClass_AShooterPlayerController_Menu_NoRegister()
	{
		return AShooterPlayerController_Menu::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterPlayerController_Menu()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerController();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterPlayerController_Menu::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800284;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterPlayerController_Menu.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterPlayerController_Menu.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterPlayerController_Menu(Z_Construct_UClass_AShooterPlayerController_Menu, TEXT("AShooterPlayerController_Menu"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterPlayerController_Menu);
	UFunction* Z_Construct_UFunction_AShooterPlayerState_BroadcastDeath()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerState();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BroadcastDeath"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00024CC0, 65535, sizeof(ShooterPlayerState_eventBroadcastDeath_Parms));
			UProperty* NewProp_KilledPlayerState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KilledPlayerState"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(KilledPlayerState, ShooterPlayerState_eventBroadcastDeath_Parms), 0x0000000000000080, Z_Construct_UClass_AShooterPlayerState_NoRegister());
			UProperty* NewProp_KillerDamageType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KillerDamageType"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(KillerDamageType, ShooterPlayerState_eventBroadcastDeath_Parms), 0x0000000000000082, Z_Construct_UClass_UDamageType_NoRegister());
			UProperty* NewProp_KillerPlayerState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KillerPlayerState"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(KillerPlayerState, ShooterPlayerState_eventBroadcastDeath_Parms), 0x0000000000000080, Z_Construct_UClass_AShooterPlayerState_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("broadcast death to local clients"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerState_InformAboutKill()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerState();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InformAboutKill"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01020CC0, 65535, sizeof(ShooterPlayerState_eventInformAboutKill_Parms));
			UProperty* NewProp_KilledPlayerState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KilledPlayerState"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(KilledPlayerState, ShooterPlayerState_eventInformAboutKill_Parms), 0x0000000000000080, Z_Construct_UClass_AShooterPlayerState_NoRegister());
			UProperty* NewProp_KillerDamageType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KillerDamageType"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(KillerDamageType, ShooterPlayerState_eventInformAboutKill_Parms), 0x0000000000000082, Z_Construct_UClass_UDamageType_NoRegister());
			UProperty* NewProp_KillerPlayerState = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("KillerPlayerState"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(KillerPlayerState, ShooterPlayerState_eventInformAboutKill_Parms), 0x0000000000000080, Z_Construct_UClass_AShooterPlayerState_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sends kill (excluding self) to clients"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterPlayerState_OnRep_TeamColor()
	{
		UObject* Outer=Z_Construct_UClass_AShooterPlayerState();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_TeamColor"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("replicate team colors. Updated the players mesh colors appropriately"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterPlayerState_NoRegister()
	{
		return AShooterPlayerState::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterPlayerState()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerState();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterPlayerState::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800280;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerState_BroadcastDeath());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerState_InformAboutKill());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterPlayerState_OnRep_TeamColor());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bQuitter, AShooterPlayerState, uint8);
				UProperty* NewProp_bQuitter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bQuitter"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bQuitter, AShooterPlayerState), 0x0000080000000000, CPP_BOOL_PROPERTY_BITMASK(bQuitter, AShooterPlayerState), sizeof(uint8), false);
				UProperty* NewProp_NumRocketsFired = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumRocketsFired"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumRocketsFired, AShooterPlayerState), 0x0000080000000000);
				UProperty* NewProp_NumBulletsFired = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumBulletsFired"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumBulletsFired, AShooterPlayerState), 0x0000080000000000);
				UProperty* NewProp_NumDeaths = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumDeaths"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumDeaths, AShooterPlayerState), 0x0000080000002020);
				UProperty* NewProp_NumKills = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NumKills"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NumKills, AShooterPlayerState), 0x0000080000002020);
				UProperty* NewProp_TeamNumber = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TeamNumber"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(TeamNumber, AShooterPlayerState), 0x0000080100002020);
				NewProp_TeamNumber->RepNotifyFunc = FName(TEXT("OnRep_TeamColor"));
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerState_BroadcastDeath()); // 1261275225
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerState_InformAboutKill()); // 1710351168
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterPlayerState_OnRep_TeamColor()); // 594642927
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Movement Collision Rendering Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Online/ShooterPlayerState.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
				MetaData->SetValue(NewProp_bQuitter, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
				MetaData->SetValue(NewProp_bQuitter, TEXT("ToolTip"), TEXT("whether the user quit the match"));
				MetaData->SetValue(NewProp_NumRocketsFired, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
				MetaData->SetValue(NewProp_NumRocketsFired, TEXT("ToolTip"), TEXT("number of rockets fired this match"));
				MetaData->SetValue(NewProp_NumBulletsFired, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
				MetaData->SetValue(NewProp_NumBulletsFired, TEXT("ToolTip"), TEXT("number of bullets fired this match"));
				MetaData->SetValue(NewProp_NumDeaths, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
				MetaData->SetValue(NewProp_NumDeaths, TEXT("ToolTip"), TEXT("number of deaths"));
				MetaData->SetValue(NewProp_NumKills, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
				MetaData->SetValue(NewProp_NumKills, TEXT("ToolTip"), TEXT("number of kills"));
				MetaData->SetValue(NewProp_TeamNumber, TEXT("ModuleRelativePath"), TEXT("Public/Online/ShooterPlayerState.h"));
				MetaData->SetValue(NewProp_TeamNumber, TEXT("ToolTip"), TEXT("team number"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterPlayerState(Z_Construct_UClass_AShooterPlayerState, TEXT("AShooterPlayerState"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterPlayerState);
	UScriptStruct* Z_Construct_UScriptStruct_FWeaponAnim()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WeaponAnim"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWeaponAnim>, EStructFlags(0x00000001));
			UProperty* NewProp_Pawn3P = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pawn3P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Pawn3P, FWeaponAnim), 0x0000000000010001, Z_Construct_UClass_UAnimMontage_NoRegister());
			UProperty* NewProp_Pawn1P = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Pawn1P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Pawn1P, FWeaponAnim), 0x0000000000010001, Z_Construct_UClass_UAnimMontage_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(NewProp_Pawn3P, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_Pawn3P, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_Pawn3P, TEXT("ToolTip"), TEXT("animation played on pawn (3rd person view)"));
			MetaData->SetValue(NewProp_Pawn1P, TEXT("Category"), TEXT("Animation"));
			MetaData->SetValue(NewProp_Pawn1P, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_Pawn1P, TEXT("ToolTip"), TEXT("animation played on pawn (1st person view)"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWeaponAnim_CRC() { return 1939023852U; }
	UScriptStruct* Z_Construct_UScriptStruct_FWeaponData()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WeaponData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FWeaponData>, EStructFlags(0x00000001));
			UProperty* NewProp_NoAnimReloadDuration = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NoAnimReloadDuration"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(NoAnimReloadDuration, FWeaponData), 0x0000000000010001);
			UProperty* NewProp_TimeBetweenShots = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TimeBetweenShots"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TimeBetweenShots, FWeaponData), 0x0000000000010001);
			UProperty* NewProp_InitialClips = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("InitialClips"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(InitialClips, FWeaponData), 0x0000000000010001);
			UProperty* NewProp_AmmoPerClip = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AmmoPerClip"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(AmmoPerClip, FWeaponData), 0x0000000000010001);
			UProperty* NewProp_MaxAmmo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxAmmo"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(MaxAmmo, FWeaponData), 0x0000000000010001);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteClip, FWeaponData, bool);
			UProperty* NewProp_bInfiniteClip = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInfiniteClip"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteClip, FWeaponData), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bInfiniteClip, FWeaponData), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInfiniteAmmo, FWeaponData, bool);
			UProperty* NewProp_bInfiniteAmmo = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bInfiniteAmmo"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInfiniteAmmo, FWeaponData), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bInfiniteAmmo, FWeaponData), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(NewProp_NoAnimReloadDuration, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_NoAnimReloadDuration, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_NoAnimReloadDuration, TEXT("ToolTip"), TEXT("failsafe reload duration if weapon doesn't have any animation for it"));
			MetaData->SetValue(NewProp_TimeBetweenShots, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_TimeBetweenShots, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_TimeBetweenShots, TEXT("ToolTip"), TEXT("time between two consecutive shots"));
			MetaData->SetValue(NewProp_InitialClips, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_InitialClips, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_InitialClips, TEXT("ToolTip"), TEXT("initial clips"));
			MetaData->SetValue(NewProp_AmmoPerClip, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_AmmoPerClip, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_AmmoPerClip, TEXT("ToolTip"), TEXT("clip size"));
			MetaData->SetValue(NewProp_MaxAmmo, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_MaxAmmo, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_MaxAmmo, TEXT("ToolTip"), TEXT("max ammo"));
			MetaData->SetValue(NewProp_bInfiniteClip, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_bInfiniteClip, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_bInfiniteClip, TEXT("ToolTip"), TEXT("infinite ammo in clip, no reload required"));
			MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("Category"), TEXT("Ammo"));
			MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(NewProp_bInfiniteAmmo, TEXT("ToolTip"), TEXT("inifite ammo for reloads"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FWeaponData_CRC() { return 3005161459U; }
	UFunction* Z_Construct_UFunction_AShooterWeapon_ClientStartReload()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClientStartReload"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x01020CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("trigger reload from server"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_GetPawnOwner()
	{
		struct ShooterWeapon_eventGetPawnOwner_Parms
		{
			AShooterCharacter* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPawnOwner"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(ShooterWeapon_eventGetPawnOwner_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, ShooterWeapon_eventGetPawnOwner_Parms), 0x0000000000000580, Z_Construct_UClass_AShooterCharacter_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Game|Weapon"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("get pawn owner"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_OnRep_BurstCounter()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_BurstCounter"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_OnRep_MyPawn()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_MyPawn"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replication & effects"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_OnRep_Reload()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_Reload"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_ServerHandleFiring()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerHandleFiring"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("[server] fire & update ammo"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_ServerStartFire()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerStartFire"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Input - server side"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_ServerStartReload()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerStartReload"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_ServerStopFire()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerStopFire"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_ServerStopReload()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerStopReload"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterWeapon_NoRegister()
	{
		return AShooterWeapon::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterWeapon()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterWeapon::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_ClientStartReload());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_GetPawnOwner());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_OnRep_BurstCounter());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_OnRep_MyPawn());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_OnRep_Reload());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_ServerHandleFiring());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_ServerStartFire());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_ServerStartReload());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_ServerStopFire());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_ServerStopReload());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_BurstCounter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BurstCounter"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(BurstCounter, AShooterWeapon), 0x0000080100002020);
				NewProp_BurstCounter->RepNotifyFunc = FName(TEXT("OnRep_BurstCounter"));
				UProperty* NewProp_CurrentAmmoInClip = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentAmmoInClip"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CurrentAmmoInClip, AShooterWeapon), 0x0000080000002020);
				UProperty* NewProp_CurrentAmmo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentAmmo"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(CurrentAmmo, AShooterWeapon), 0x0000080000002020);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPendingReload, AShooterWeapon, uint8);
				UProperty* NewProp_bPendingReload = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPendingReload"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPendingReload, AShooterWeapon), 0x0000080100002020, CPP_BOOL_PROPERTY_BITMASK(bPendingReload, AShooterWeapon), sizeof(uint8), false);
				NewProp_bPendingReload->RepNotifyFunc = FName(TEXT("OnRep_Reload"));
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopedFireAnim, AShooterWeapon, uint8);
				UProperty* NewProp_bLoopedFireAnim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoopedFireAnim"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopedFireAnim, AShooterWeapon), 0x0000080000010001, CPP_BOOL_PROPERTY_BITMASK(bLoopedFireAnim, AShooterWeapon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopedFireSound, AShooterWeapon, uint8);
				UProperty* NewProp_bLoopedFireSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoopedFireSound"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopedFireSound, AShooterWeapon), 0x0000080000010001, CPP_BOOL_PROPERTY_BITMASK(bLoopedFireSound, AShooterWeapon), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoopedMuzzleFX, AShooterWeapon, uint8);
				UProperty* NewProp_bLoopedMuzzleFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bLoopedMuzzleFX"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoopedMuzzleFX, AShooterWeapon), 0x0000080000010001, CPP_BOOL_PROPERTY_BITMASK(bLoopedMuzzleFX, AShooterWeapon), sizeof(uint8), false);
				UProperty* NewProp_FireAnim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireAnim"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FireAnim, AShooterWeapon), 0x0000080000010001, Z_Construct_UScriptStruct_FWeaponAnim());
				UProperty* NewProp_EquipAnim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EquipAnim"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(EquipAnim, AShooterWeapon), 0x0000080000010001, Z_Construct_UScriptStruct_FWeaponAnim());
				UProperty* NewProp_EquipSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("EquipSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(EquipSound, AShooterWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_ReloadAnim = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReloadAnim"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ReloadAnim, AShooterWeapon), 0x0000080000010001, Z_Construct_UScriptStruct_FWeaponAnim());
				UProperty* NewProp_ReloadSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ReloadSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReloadSound, AShooterWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_OutOfAmmoSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OutOfAmmoSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OutOfAmmoSound, AShooterWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_FireFinishSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireFinishSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireFinishSound, AShooterWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_FireLoopSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireLoopSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireLoopSound, AShooterWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_FireSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireSound"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireSound, AShooterWeapon), 0x0000080000010001, Z_Construct_UClass_USoundCue_NoRegister());
				UProperty* NewProp_FireForceFeedback = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireForceFeedback"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireForceFeedback, AShooterWeapon), 0x0000080000010001, Z_Construct_UClass_UForceFeedbackEffect_NoRegister());
				UProperty* NewProp_FireCameraShake = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireCameraShake"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(FireCameraShake, AShooterWeapon), 0x0004080000010001, Z_Construct_UClass_UCameraShake_NoRegister());
				UProperty* NewProp_MuzzlePSCSecondary = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MuzzlePSCSecondary"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MuzzlePSCSecondary, AShooterWeapon), 0x0000080000082008, Z_Construct_UClass_UParticleSystemComponent_NoRegister());
				UProperty* NewProp_MuzzlePSC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MuzzlePSC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MuzzlePSC, AShooterWeapon), 0x0000080000082008, Z_Construct_UClass_UParticleSystemComponent_NoRegister());
				UProperty* NewProp_MuzzleFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MuzzleFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MuzzleFX, AShooterWeapon), 0x0000080000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_MuzzleAttachPoint = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MuzzleAttachPoint"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(MuzzleAttachPoint, AShooterWeapon), 0x0000080000010001);
				UProperty* NewProp_FireAC = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FireAC"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FireAC, AShooterWeapon), 0x0000080000082008, Z_Construct_UClass_UAudioComponent_NoRegister());
				UProperty* NewProp_Mesh3P = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mesh3P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh3P, AShooterWeapon), 0x00000000000b0009, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
				UProperty* NewProp_Mesh1P = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Mesh1P"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Mesh1P, AShooterWeapon), 0x00000000000b0009, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
				UProperty* NewProp_WeaponConfig = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("WeaponConfig"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(WeaponConfig, AShooterWeapon), 0x0000080000010001, Z_Construct_UScriptStruct_FWeaponData());
				UProperty* NewProp_MyPawn = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MyPawn"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MyPawn, AShooterWeapon), 0x0000080100002020, Z_Construct_UClass_AShooterCharacter_NoRegister());
				NewProp_MyPawn->RepNotifyFunc = FName(TEXT("OnRep_MyPawn"));
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHideCrosshairWhileNotAiming, AShooterWeapon, bool);
				UProperty* NewProp_bHideCrosshairWhileNotAiming = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHideCrosshairWhileNotAiming"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHideCrosshairWhileNotAiming, AShooterWeapon), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(bHideCrosshairWhileNotAiming, AShooterWeapon), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseCustomAimingCrosshair, AShooterWeapon, bool);
				UProperty* NewProp_UseCustomAimingCrosshair = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseCustomAimingCrosshair"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseCustomAimingCrosshair, AShooterWeapon), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(UseCustomAimingCrosshair, AShooterWeapon), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseCustomCrosshair, AShooterWeapon, bool);
				UProperty* NewProp_UseCustomCrosshair = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseCustomCrosshair"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseCustomCrosshair, AShooterWeapon), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(UseCustomCrosshair, AShooterWeapon), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseLaserDot, AShooterWeapon, bool);
				UProperty* NewProp_UseLaserDot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseLaserDot"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseLaserDot, AShooterWeapon), 0x0000000000010001, CPP_BOOL_PROPERTY_BITMASK(UseLaserDot, AShooterWeapon), sizeof(bool), true);
				UProperty* NewProp_AimingCrosshair = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AimingCrosshair"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(AimingCrosshair, AShooterWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_FCanvasIcon());
				NewProp_AimingCrosshair->ArrayDim = CPP_ARRAY_DIM(AimingCrosshair, AShooterWeapon);
				UProperty* NewProp_Crosshair = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Crosshair"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Crosshair, AShooterWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_FCanvasIcon());
				NewProp_Crosshair->ArrayDim = CPP_ARRAY_DIM(Crosshair, AShooterWeapon);
				UProperty* NewProp_SecondaryClipIconOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecondaryClipIconOffset"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SecondaryClipIconOffset, AShooterWeapon), 0x0000000000010001);
				UProperty* NewProp_PrimaryClipIconOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryClipIconOffset"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(PrimaryClipIconOffset, AShooterWeapon), 0x0000000000010001);
				UProperty* NewProp_AmmoIconsCount = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AmmoIconsCount"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AmmoIconsCount, AShooterWeapon), 0x0000000000010001);
				UProperty* NewProp_SecondaryClipIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecondaryClipIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SecondaryClipIcon, AShooterWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_PrimaryClipIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryClipIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PrimaryClipIcon, AShooterWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_SecondaryIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SecondaryIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SecondaryIcon, AShooterWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_FCanvasIcon());
				UProperty* NewProp_PrimaryIcon = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PrimaryIcon"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PrimaryIcon, AShooterWeapon), 0x0000000000010001, Z_Construct_UScriptStruct_FCanvasIcon());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_ClientStartReload()); // 2786446357
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_GetPawnOwner()); // 3845889544
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_OnRep_BurstCounter()); // 1188310212
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_OnRep_MyPawn()); // 2987626534
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_OnRep_Reload()); // 3890891421
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_ServerHandleFiring()); // 2523165781
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_ServerStartFire()); // 3702517879
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_ServerStartReload()); // 3203613841
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_ServerStopFire()); // 3308210091
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_ServerStopReload()); // 2759840422
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Weapons/ShooterWeapon.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_BurstCounter, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_BurstCounter, TEXT("ToolTip"), TEXT("burst counter, used for replicating fire events to remote clients"));
				MetaData->SetValue(NewProp_CurrentAmmoInClip, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_CurrentAmmoInClip, TEXT("ToolTip"), TEXT("current ammo - inside clip"));
				MetaData->SetValue(NewProp_CurrentAmmo, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_CurrentAmmo, TEXT("ToolTip"), TEXT("current total ammo"));
				MetaData->SetValue(NewProp_bPendingReload, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_bPendingReload, TEXT("ToolTip"), TEXT("is reload animation playing?"));
				MetaData->SetValue(NewProp_bLoopedFireAnim, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_bLoopedFireAnim, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_bLoopedFireAnim, TEXT("ToolTip"), TEXT("is fire animation looped?"));
				MetaData->SetValue(NewProp_bLoopedFireSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_bLoopedFireSound, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_bLoopedFireSound, TEXT("ToolTip"), TEXT("is fire sound looped?"));
				MetaData->SetValue(NewProp_bLoopedMuzzleFX, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_bLoopedMuzzleFX, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_bLoopedMuzzleFX, TEXT("ToolTip"), TEXT("is muzzle FX looped?"));
				MetaData->SetValue(NewProp_FireAnim, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_FireAnim, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_FireAnim, TEXT("ToolTip"), TEXT("fire animations"));
				MetaData->SetValue(NewProp_EquipAnim, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_EquipAnim, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_EquipAnim, TEXT("ToolTip"), TEXT("equip animations"));
				MetaData->SetValue(NewProp_EquipSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_EquipSound, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_EquipSound, TEXT("ToolTip"), TEXT("equip sound"));
				MetaData->SetValue(NewProp_ReloadAnim, TEXT("Category"), TEXT("Animation"));
				MetaData->SetValue(NewProp_ReloadAnim, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_ReloadAnim, TEXT("ToolTip"), TEXT("reload animations"));
				MetaData->SetValue(NewProp_ReloadSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_ReloadSound, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_ReloadSound, TEXT("ToolTip"), TEXT("reload sound"));
				MetaData->SetValue(NewProp_OutOfAmmoSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_OutOfAmmoSound, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_OutOfAmmoSound, TEXT("ToolTip"), TEXT("out of ammo sound"));
				MetaData->SetValue(NewProp_FireFinishSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_FireFinishSound, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_FireFinishSound, TEXT("ToolTip"), TEXT("finished burst sound (bLoopedFireSound set)"));
				MetaData->SetValue(NewProp_FireLoopSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_FireLoopSound, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_FireLoopSound, TEXT("ToolTip"), TEXT("looped fire sound (bLoopedFireSound set)"));
				MetaData->SetValue(NewProp_FireSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_FireSound, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_FireSound, TEXT("ToolTip"), TEXT("single fire sound (bLoopedFireSound not set)"));
				MetaData->SetValue(NewProp_FireForceFeedback, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_FireForceFeedback, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_FireForceFeedback, TEXT("ToolTip"), TEXT("force feedback effect to play when the weapon is fired"));
				MetaData->SetValue(NewProp_FireCameraShake, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_FireCameraShake, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_FireCameraShake, TEXT("ToolTip"), TEXT("camera shake on firing"));
				MetaData->SetValue(NewProp_MuzzlePSCSecondary, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MuzzlePSCSecondary, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_MuzzlePSCSecondary, TEXT("ToolTip"), TEXT("spawned component for second muzzle FX (Needed for split screen)"));
				MetaData->SetValue(NewProp_MuzzlePSC, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MuzzlePSC, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_MuzzlePSC, TEXT("ToolTip"), TEXT("spawned component for muzzle FX"));
				MetaData->SetValue(NewProp_MuzzleFX, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_MuzzleFX, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_MuzzleFX, TEXT("ToolTip"), TEXT("FX for muzzle flash"));
				MetaData->SetValue(NewProp_MuzzleAttachPoint, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_MuzzleAttachPoint, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_MuzzleAttachPoint, TEXT("ToolTip"), TEXT("name of bone/socket for muzzle in weapon mesh"));
				MetaData->SetValue(NewProp_FireAC, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_FireAC, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_FireAC, TEXT("ToolTip"), TEXT("firing audio (bLoopedFireSound set)"));
				MetaData->SetValue(NewProp_Mesh3P, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_Mesh3P, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Mesh3P, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_Mesh3P, TEXT("ToolTip"), TEXT("weapon mesh: 3rd person view"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("Category"), TEXT("Mesh"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_Mesh1P, TEXT("ToolTip"), TEXT("weapon mesh: 1st person view"));
				MetaData->SetValue(NewProp_WeaponConfig, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_WeaponConfig, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_WeaponConfig, TEXT("ToolTip"), TEXT("weapon data"));
				MetaData->SetValue(NewProp_MyPawn, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_MyPawn, TEXT("ToolTip"), TEXT("pawn owner"));
				MetaData->SetValue(NewProp_bHideCrosshairWhileNotAiming, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_bHideCrosshairWhileNotAiming, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_bHideCrosshairWhileNotAiming, TEXT("ToolTip"), TEXT("true - crosshair will not be shown unless aiming with the weapon"));
				MetaData->SetValue(NewProp_UseCustomAimingCrosshair, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_UseCustomAimingCrosshair, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_UseCustomAimingCrosshair, TEXT("ToolTip"), TEXT("false = use custom one if set, otherwise default crosshair"));
				MetaData->SetValue(NewProp_UseCustomCrosshair, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_UseCustomCrosshair, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_UseCustomCrosshair, TEXT("ToolTip"), TEXT("false = default crosshair"));
				MetaData->SetValue(NewProp_UseLaserDot, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_UseLaserDot, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_UseLaserDot, TEXT("ToolTip"), TEXT("only use red colored center part of aiming crosshair"));
				MetaData->SetValue(NewProp_AimingCrosshair, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_AimingCrosshair, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_AimingCrosshair, TEXT("ToolTip"), TEXT("crosshair parts icons when targeting (left, top, right, bottom and center)"));
				MetaData->SetValue(NewProp_Crosshair, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_Crosshair, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_Crosshair, TEXT("ToolTip"), TEXT("crosshair parts icons (left, top, right, bottom and center)"));
				MetaData->SetValue(NewProp_SecondaryClipIconOffset, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_SecondaryClipIconOffset, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_SecondaryClipIconOffset, TEXT("ToolTip"), TEXT("defines spacing between secondary ammo icons (left side)"));
				MetaData->SetValue(NewProp_PrimaryClipIconOffset, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_PrimaryClipIconOffset, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_PrimaryClipIconOffset, TEXT("ToolTip"), TEXT("defines spacing between primary ammo icons (left side)"));
				MetaData->SetValue(NewProp_AmmoIconsCount, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_AmmoIconsCount, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_AmmoIconsCount, TEXT("ToolTip"), TEXT("how many icons to draw per clip"));
				MetaData->SetValue(NewProp_SecondaryClipIcon, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_SecondaryClipIcon, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_SecondaryClipIcon, TEXT("ToolTip"), TEXT("bullet icon used to draw secondary clip (left side)"));
				MetaData->SetValue(NewProp_PrimaryClipIcon, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_PrimaryClipIcon, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_PrimaryClipIcon, TEXT("ToolTip"), TEXT("bullet icon used to draw current clip (left side)"));
				MetaData->SetValue(NewProp_SecondaryIcon, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_SecondaryIcon, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_SecondaryIcon, TEXT("ToolTip"), TEXT("icon displayed on the HUD when weapon is secondary"));
				MetaData->SetValue(NewProp_PrimaryIcon, TEXT("Category"), TEXT("HUD"));
				MetaData->SetValue(NewProp_PrimaryIcon, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon.h"));
				MetaData->SetValue(NewProp_PrimaryIcon, TEXT("ToolTip"), TEXT("icon displayed on the HUD when weapon is equipped as primary"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterWeapon(Z_Construct_UClass_AShooterWeapon, TEXT("AShooterWeapon"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterWeapon);
	UScriptStruct* Z_Construct_UScriptStruct_FProjectileWeaponData()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ProjectileWeaponData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FProjectileWeaponData>, EStructFlags(0x00000001));
			UProperty* NewProp_DamageType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageType"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DamageType, FProjectileWeaponData), 0x0004000000010001, Z_Construct_UClass_UDamageType_NoRegister());
			UProperty* NewProp_ExplosionRadius = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExplosionRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ExplosionRadius, FProjectileWeaponData), 0x0000000000010001);
			UProperty* NewProp_ExplosionDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ExplosionDamage"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(ExplosionDamage, FProjectileWeaponData), 0x0000000000010001);
			UProperty* NewProp_ProjectileLife = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProjectileLife"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ProjectileLife, FProjectileWeaponData), 0x0000000000010001);
			UProperty* NewProp_ProjectileClass = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ProjectileClass"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ProjectileClass, FProjectileWeaponData), 0x0004000000010001, Z_Construct_UClass_AShooterProjectile_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(NewProp_DamageType, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_DamageType, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Projectile.h"));
			MetaData->SetValue(NewProp_DamageType, TEXT("ToolTip"), TEXT("type of damage"));
			MetaData->SetValue(NewProp_ExplosionRadius, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_ExplosionRadius, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Projectile.h"));
			MetaData->SetValue(NewProp_ExplosionRadius, TEXT("ToolTip"), TEXT("radius of damage"));
			MetaData->SetValue(NewProp_ExplosionDamage, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_ExplosionDamage, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Projectile.h"));
			MetaData->SetValue(NewProp_ExplosionDamage, TEXT("ToolTip"), TEXT("damage at impact point"));
			MetaData->SetValue(NewProp_ProjectileLife, TEXT("Category"), TEXT("Projectile"));
			MetaData->SetValue(NewProp_ProjectileLife, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Projectile.h"));
			MetaData->SetValue(NewProp_ProjectileLife, TEXT("ToolTip"), TEXT("life time"));
			MetaData->SetValue(NewProp_ProjectileClass, TEXT("Category"), TEXT("Projectile"));
			MetaData->SetValue(NewProp_ProjectileClass, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Projectile.h"));
			MetaData->SetValue(NewProp_ProjectileClass, TEXT("ToolTip"), TEXT("projectile class"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FProjectileWeaponData_CRC() { return 431700527U; }
	UFunction* Z_Construct_UFunction_AShooterWeapon_Projectile_ServerFireProjectile()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon_Projectile();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerFireProjectile"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80A80CC0, 65535, sizeof(ShooterWeapon_Projectile_eventServerFireProjectile_Parms));
			UProperty* NewProp_ShootDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShootDir"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShootDir, ShooterWeapon_Projectile_eventServerFireProjectile_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector_NetQuantizeNormal());
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, ShooterWeapon_Projectile_eventServerFireProjectile_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Projectile.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("spawn projectile on server"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterWeapon_Projectile_NoRegister()
	{
		return AShooterWeapon_Projectile::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterWeapon_Projectile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AShooterWeapon();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterWeapon_Projectile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_Projectile_ServerFireProjectile());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ProjectileConfig = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ProjectileConfig"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ProjectileConfig, AShooterWeapon_Projectile), 0x0000080000010001, Z_Construct_UScriptStruct_FProjectileWeaponData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_Projectile_ServerFireProjectile()); // 2177050314
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Weapons/ShooterWeapon_Projectile.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Projectile.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A weapon that fires a visible projectile"));
				MetaData->SetValue(NewProp_ProjectileConfig, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_ProjectileConfig, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Projectile.h"));
				MetaData->SetValue(NewProp_ProjectileConfig, TEXT("ToolTip"), TEXT("weapon config"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterWeapon_Projectile(Z_Construct_UClass_AShooterWeapon_Projectile, TEXT("AShooterWeapon_Projectile"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterWeapon_Projectile);
	UFunction* Z_Construct_UFunction_AShooterProjectile_OnImpact()
	{
		struct ShooterProjectile_eventOnImpact_Parms
		{
			FHitResult HitResult;
		};
		UObject* Outer=Z_Construct_UClass_AShooterProjectile();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnImpact"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00420401, 65535, sizeof(ShooterProjectile_eventOnImpact_Parms));
			UProperty* NewProp_HitResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitResult"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitResult, ShooterProjectile_eventOnImpact_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterProjectile.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("handle hit"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterProjectile_OnRep_Exploded()
	{
		UObject* Outer=Z_Construct_UClass_AShooterProjectile();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_Exploded"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterProjectile.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("[client] explosion happened"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterProjectile_NoRegister()
	{
		return AShooterProjectile::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterProjectile()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterProjectile::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterProjectile_OnImpact());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterProjectile_OnRep_Exploded());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bExploded, AShooterProjectile, bool);
				UProperty* NewProp_bExploded = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bExploded"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bExploded, AShooterProjectile), 0x0000080100002020, CPP_BOOL_PROPERTY_BITMASK(bExploded, AShooterProjectile), sizeof(bool), true);
				NewProp_bExploded->RepNotifyFunc = FName(TEXT("OnRep_Exploded"));
				UProperty* NewProp_ExplosionTemplate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ExplosionTemplate"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ExplosionTemplate, AShooterProjectile), 0x0004080000010001, Z_Construct_UClass_AShooterExplosionEffect_NoRegister());
				UProperty* NewProp_ParticleComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ParticleComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ParticleComp, AShooterProjectile), 0x00000000000b0009, Z_Construct_UClass_UParticleSystemComponent_NoRegister());
				UProperty* NewProp_CollisionComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(CollisionComp, AShooterProjectile), 0x00000000000b0009, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_MovementComp = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MovementComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(MovementComp, AShooterProjectile), 0x00000000000b0009, Z_Construct_UClass_UProjectileMovementComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterProjectile_OnImpact()); // 1013371203
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterProjectile_OnRep_Exploded()); // 1828799553
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Weapons/ShooterProjectile.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterProjectile.h"));
				MetaData->SetValue(NewProp_bExploded, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterProjectile.h"));
				MetaData->SetValue(NewProp_bExploded, TEXT("ToolTip"), TEXT("did it explode?"));
				MetaData->SetValue(NewProp_ExplosionTemplate, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_ExplosionTemplate, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterProjectile.h"));
				MetaData->SetValue(NewProp_ExplosionTemplate, TEXT("ToolTip"), TEXT("effects for explosion"));
				MetaData->SetValue(NewProp_ParticleComp, TEXT("Category"), TEXT("Projectile"));
				MetaData->SetValue(NewProp_ParticleComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ParticleComp, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterProjectile.h"));
				MetaData->SetValue(NewProp_CollisionComp, TEXT("Category"), TEXT("Projectile"));
				MetaData->SetValue(NewProp_CollisionComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CollisionComp, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterProjectile.h"));
				MetaData->SetValue(NewProp_CollisionComp, TEXT("ToolTip"), TEXT("collisions"));
				MetaData->SetValue(NewProp_MovementComp, TEXT("Category"), TEXT("Projectile"));
				MetaData->SetValue(NewProp_MovementComp, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MovementComp, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterProjectile.h"));
				MetaData->SetValue(NewProp_MovementComp, TEXT("ToolTip"), TEXT("movement component"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterProjectile(Z_Construct_UClass_AShooterProjectile, TEXT("AShooterProjectile"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterProjectile);
	UScriptStruct* Z_Construct_UScriptStruct_FShooterScoreboardStyle()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ShooterScoreboardStyle"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), Z_Construct_UScriptStruct_FSlateWidgetStyle(), new UScriptStruct::TCppStructOps<FShooterScoreboardStyle>, EStructFlags(0x00000001));
			UProperty* NewProp_PlayerChangeSound = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PlayerChangeSound"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(PlayerChangeSound, FShooterScoreboardStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateSound());
			UProperty* NewProp_ScoreStatColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ScoreStatColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScoreStatColor, FShooterScoreboardStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_DeathStatColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DeathStatColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(DeathStatColor, FShooterScoreboardStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_KillStatColor = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("KillStatColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(KillStatColor, FShooterScoreboardStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateColor());
			UProperty* NewProp_ItemBorderBrush = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ItemBorderBrush"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ItemBorderBrush, FShooterScoreboardStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FSlateBrush());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Represents the appearance of an SShooterScoreboardWidget"));
			MetaData->SetValue(NewProp_PlayerChangeSound, TEXT("Category"), TEXT("Sound"));
			MetaData->SetValue(NewProp_PlayerChangeSound, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterScoreboardWidgetStyle.h"));
			MetaData->SetValue(NewProp_PlayerChangeSound, TEXT("ToolTip"), TEXT("The sound that should play when the highlighted player changes in the scoreboard"));
			MetaData->SetValue(NewProp_ScoreStatColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ScoreStatColor, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterScoreboardWidgetStyle.h"));
			MetaData->SetValue(NewProp_ScoreStatColor, TEXT("ToolTip"), TEXT("The color used for the score stat"));
			MetaData->SetValue(NewProp_DeathStatColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_DeathStatColor, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterScoreboardWidgetStyle.h"));
			MetaData->SetValue(NewProp_DeathStatColor, TEXT("ToolTip"), TEXT("The color used for the death stat"));
			MetaData->SetValue(NewProp_KillStatColor, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_KillStatColor, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterScoreboardWidgetStyle.h"));
			MetaData->SetValue(NewProp_KillStatColor, TEXT("ToolTip"), TEXT("The color used for the kill stat"));
			MetaData->SetValue(NewProp_ItemBorderBrush, TEXT("Category"), TEXT("Appearance"));
			MetaData->SetValue(NewProp_ItemBorderBrush, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterScoreboardWidgetStyle.h"));
			MetaData->SetValue(NewProp_ItemBorderBrush, TEXT("ToolTip"), TEXT("The brush used for the item border"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FShooterScoreboardStyle_CRC() { return 3905652104U; }
	UClass* Z_Construct_UClass_UShooterScoreboardWidgetStyle_NoRegister()
	{
		return UShooterScoreboardWidgetStyle::StaticClass();
	}
	UClass* Z_Construct_UClass_UShooterScoreboardWidgetStyle()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USlateWidgetStyleContainerBase();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = UShooterScoreboardWidgetStyle::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ScoreboardStyle = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScoreboardStyle"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ScoreboardStyle, UShooterScoreboardWidgetStyle), 0x0000000000000001, Z_Construct_UScriptStruct_FShooterScoreboardStyle());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("UI/Style/ShooterScoreboardWidgetStyle.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterScoreboardWidgetStyle.h"));
				MetaData->SetValue(NewProp_ScoreboardStyle, TEXT("Category"), TEXT("Appearance"));
				MetaData->SetValue(NewProp_ScoreboardStyle, TEXT("ModuleRelativePath"), TEXT("Private/UI/Style/ShooterScoreboardWidgetStyle.h"));
				MetaData->SetValue(NewProp_ScoreboardStyle, TEXT("ShowOnlyInnerProperties"), TEXT(""));
				MetaData->SetValue(NewProp_ScoreboardStyle, TEXT("ToolTip"), TEXT("The actual data describing the scoreboard's appearance."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UShooterScoreboardWidgetStyle(Z_Construct_UClass_UShooterScoreboardWidgetStyle, TEXT("UShooterScoreboardWidgetStyle"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UShooterScoreboardWidgetStyle);
	UClass* Z_Construct_UClass_AShooterSpectatorPawn_NoRegister()
	{
		return AShooterSpectatorPawn::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterSpectatorPawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ASpectatorPawn();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterSpectatorPawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800280;


				OuterClass->ClassConfigName = FName(TEXT("Game"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Player/ShooterSpectatorPawn.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Player/ShooterSpectatorPawn.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterSpectatorPawn(Z_Construct_UClass_AShooterSpectatorPawn, TEXT("AShooterSpectatorPawn"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterSpectatorPawn);
	UClass* Z_Construct_UClass_AShooterTeamStart_NoRegister()
	{
		return AShooterTeamStart::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterTeamStart()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APlayerStart();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterTeamStart::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNotForBots, AShooterTeamStart, uint8);
				UProperty* NewProp_bNotForBots = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNotForBots"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNotForBots, AShooterTeamStart), 0x0000000000000801, CPP_BOOL_PROPERTY_BITMASK(bNotForBots, AShooterTeamStart), sizeof(uint8), false);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bNotForPlayers, AShooterTeamStart, uint8);
				UProperty* NewProp_bNotForPlayers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bNotForPlayers"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bNotForPlayers, AShooterTeamStart), 0x0000000000000801, CPP_BOOL_PROPERTY_BITMASK(bNotForPlayers, AShooterTeamStart), sizeof(uint8), false);
				UProperty* NewProp_SpawnTeam = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpawnTeam"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(SpawnTeam, AShooterTeamStart), 0x0000000000000801);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Collision Lighting LightColor Force"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("ShooterTeamStart.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTeamStart.h"));
				MetaData->SetValue(NewProp_bNotForBots, TEXT("Category"), TEXT("Team"));
				MetaData->SetValue(NewProp_bNotForBots, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTeamStart.h"));
				MetaData->SetValue(NewProp_bNotForBots, TEXT("ToolTip"), TEXT("Whether bots can start at this point"));
				MetaData->SetValue(NewProp_bNotForPlayers, TEXT("Category"), TEXT("Team"));
				MetaData->SetValue(NewProp_bNotForPlayers, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTeamStart.h"));
				MetaData->SetValue(NewProp_bNotForPlayers, TEXT("ToolTip"), TEXT("Whether players can start at this point"));
				MetaData->SetValue(NewProp_SpawnTeam, TEXT("Category"), TEXT("Team"));
				MetaData->SetValue(NewProp_SpawnTeam, TEXT("ModuleRelativePath"), TEXT("Public/ShooterTeamStart.h"));
				MetaData->SetValue(NewProp_SpawnTeam, TEXT("ToolTip"), TEXT("Which team can start at this point"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterTeamStart(Z_Construct_UClass_AShooterTeamStart, TEXT("AShooterTeamStart"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterTeamStart);
	UScriptStruct* Z_Construct_UScriptStruct_FInstantWeaponData()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InstantWeaponData"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInstantWeaponData>, EStructFlags(0x00000001));
			UProperty* NewProp_AllowedViewDotHitDir = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("AllowedViewDotHitDir"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(AllowedViewDotHitDir, FInstantWeaponData), 0x0000000000010001);
			UProperty* NewProp_ClientSideHitLeeway = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ClientSideHitLeeway"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ClientSideHitLeeway, FInstantWeaponData), 0x0000000000010001);
			UProperty* NewProp_DamageType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DamageType"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(DamageType, FInstantWeaponData), 0x0004000000010001, Z_Construct_UClass_UDamageType_NoRegister());
			UProperty* NewProp_HitDamage = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("HitDamage"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(HitDamage, FInstantWeaponData), 0x0000000000010001);
			UProperty* NewProp_WeaponRange = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WeaponRange"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WeaponRange, FInstantWeaponData), 0x0000000000010001);
			UProperty* NewProp_FiringSpreadMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FiringSpreadMax"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FiringSpreadMax, FInstantWeaponData), 0x0000000000010001);
			UProperty* NewProp_FiringSpreadIncrement = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FiringSpreadIncrement"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FiringSpreadIncrement, FInstantWeaponData), 0x0000000000010001);
			UProperty* NewProp_TargetingSpreadMod = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("TargetingSpreadMod"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TargetingSpreadMod, FInstantWeaponData), 0x0000000000010001);
			UProperty* NewProp_WeaponSpread = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("WeaponSpread"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(WeaponSpread, FInstantWeaponData), 0x0000000000010001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(NewProp_AllowedViewDotHitDir, TEXT("Category"), TEXT("HitVerification"));
			MetaData->SetValue(NewProp_AllowedViewDotHitDir, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_AllowedViewDotHitDir, TEXT("ToolTip"), TEXT("hit verification: threshold for dot product between view direction and hit direction"));
			MetaData->SetValue(NewProp_ClientSideHitLeeway, TEXT("Category"), TEXT("HitVerification"));
			MetaData->SetValue(NewProp_ClientSideHitLeeway, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_ClientSideHitLeeway, TEXT("ToolTip"), TEXT("hit verification: scale for bounding box of hit actor"));
			MetaData->SetValue(NewProp_DamageType, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_DamageType, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_DamageType, TEXT("ToolTip"), TEXT("type of damage"));
			MetaData->SetValue(NewProp_HitDamage, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_HitDamage, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_HitDamage, TEXT("ToolTip"), TEXT("damage amount"));
			MetaData->SetValue(NewProp_WeaponRange, TEXT("Category"), TEXT("WeaponStat"));
			MetaData->SetValue(NewProp_WeaponRange, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_WeaponRange, TEXT("ToolTip"), TEXT("weapon range"));
			MetaData->SetValue(NewProp_FiringSpreadMax, TEXT("Category"), TEXT("Accuracy"));
			MetaData->SetValue(NewProp_FiringSpreadMax, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_FiringSpreadMax, TEXT("ToolTip"), TEXT("continuous firing: max increment"));
			MetaData->SetValue(NewProp_FiringSpreadIncrement, TEXT("Category"), TEXT("Accuracy"));
			MetaData->SetValue(NewProp_FiringSpreadIncrement, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_FiringSpreadIncrement, TEXT("ToolTip"), TEXT("continuous firing: spread increment"));
			MetaData->SetValue(NewProp_TargetingSpreadMod, TEXT("Category"), TEXT("Accuracy"));
			MetaData->SetValue(NewProp_TargetingSpreadMod, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_TargetingSpreadMod, TEXT("ToolTip"), TEXT("targeting spread modifier"));
			MetaData->SetValue(NewProp_WeaponSpread, TEXT("Category"), TEXT("Accuracy"));
			MetaData->SetValue(NewProp_WeaponSpread, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_WeaponSpread, TEXT("ToolTip"), TEXT("base weapon spread (degrees)"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInstantWeaponData_CRC() { return 2931642398U; }
	UScriptStruct* Z_Construct_UScriptStruct_FInstantHitInfo()
	{
		UPackage* Outer=Z_Construct_UPackage_ShooterGame();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("InstantHitInfo"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FInstantHitInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_RandomSeed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RandomSeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RandomSeed, FInstantHitInfo), 0x0000000000000000);
			UProperty* NewProp_ReticleSpread = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ReticleSpread"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReticleSpread, FInstantHitInfo), 0x0000000000000000);
			UProperty* NewProp_Origin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Origin"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Origin, FInstantHitInfo), 0x0000000000000000, Z_Construct_UScriptStruct_FVector());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(NewProp_RandomSeed, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_ReticleSpread, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(NewProp_Origin, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FInstantHitInfo_CRC() { return 2236284113U; }
	UFunction* Z_Construct_UFunction_AShooterWeapon_Instant_OnRep_HitNotify()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon_Instant();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_HitNotify"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Effects replication"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_Instant_ServerNotifyHit()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon_Instant();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerNotifyHit"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280CC0, 65535, sizeof(ShooterWeapon_Instant_eventServerNotifyHit_Parms));
			UProperty* NewProp_ReticleSpread = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReticleSpread"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReticleSpread, ShooterWeapon_Instant_eventServerNotifyHit_Parms), 0x0000000000000080);
			UProperty* NewProp_RandomSeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RandomSeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RandomSeed, ShooterWeapon_Instant_eventServerNotifyHit_Parms), 0x0000000000000080);
			UProperty* NewProp_ShootDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShootDir"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShootDir, ShooterWeapon_Instant_eventServerNotifyHit_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector_NetQuantizeNormal());
			UProperty* NewProp_Impact = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Impact"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Impact, ShooterWeapon_Instant_eventServerNotifyHit_Parms), 0x0000008000000082, Z_Construct_UScriptStruct_FHitResult());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("server notified of hit from client to verify"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_AShooterWeapon_Instant_ServerNotifyMiss()
	{
		UObject* Outer=Z_Construct_UClass_AShooterWeapon_Instant();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ServerNotifyMiss"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x80280C40, 65535, sizeof(ShooterWeapon_Instant_eventServerNotifyMiss_Parms));
			UProperty* NewProp_ReticleSpread = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReticleSpread"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReticleSpread, ShooterWeapon_Instant_eventServerNotifyMiss_Parms), 0x0000000000000080);
			UProperty* NewProp_RandomSeed = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RandomSeed"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(RandomSeed, ShooterWeapon_Instant_eventServerNotifyMiss_Parms), 0x0000000000000080);
			UProperty* NewProp_ShootDir = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ShootDir"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(ShootDir, ShooterWeapon_Instant_eventServerNotifyMiss_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FVector_NetQuantizeNormal());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("server notified of miss to show trail FX"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_AShooterWeapon_Instant_NoRegister()
	{
		return AShooterWeapon_Instant::StaticClass();
	}
	UClass* Z_Construct_UClass_AShooterWeapon_Instant()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AShooterWeapon();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = AShooterWeapon_Instant::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;

				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_Instant_OnRep_HitNotify());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_Instant_ServerNotifyHit());
				OuterClass->LinkChild(Z_Construct_UFunction_AShooterWeapon_Instant_ServerNotifyMiss());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_HitNotify = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HitNotify"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(HitNotify, AShooterWeapon_Instant), 0x0000080100002020, Z_Construct_UScriptStruct_FInstantHitInfo());
				NewProp_HitNotify->RepNotifyFunc = FName(TEXT("OnRep_HitNotify"));
				UProperty* NewProp_TrailTargetParam = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrailTargetParam"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TrailTargetParam, AShooterWeapon_Instant), 0x0000080000010001);
				UProperty* NewProp_TrailFX = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TrailFX"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TrailFX, AShooterWeapon_Instant), 0x0000080000010001, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_ImpactTemplate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ImpactTemplate"), RF_Public|RF_Transient|RF_Native) UClassProperty(CPP_PROPERTY_BASE(ImpactTemplate, AShooterWeapon_Instant), 0x0004080000010001, Z_Construct_UClass_AShooterImpactEffect_NoRegister());
				UProperty* NewProp_InstantConfig = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InstantConfig"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InstantConfig, AShooterWeapon_Instant), 0x0000080000010001, Z_Construct_UScriptStruct_FInstantWeaponData());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_Instant_OnRep_HitNotify()); // 1079581768
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_Instant_ServerNotifyHit()); // 4191314465
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_AShooterWeapon_Instant_ServerNotifyMiss()); // 790254181
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Weapons/ShooterWeapon_Instant.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A weapon where the damage impact occurs instantly upon firing"));
				MetaData->SetValue(NewProp_HitNotify, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
				MetaData->SetValue(NewProp_HitNotify, TEXT("ToolTip"), TEXT("instant hit notify for replication"));
				MetaData->SetValue(NewProp_TrailTargetParam, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_TrailTargetParam, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
				MetaData->SetValue(NewProp_TrailTargetParam, TEXT("ToolTip"), TEXT("param name for beam target in smoke trail"));
				MetaData->SetValue(NewProp_TrailFX, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_TrailFX, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
				MetaData->SetValue(NewProp_TrailFX, TEXT("ToolTip"), TEXT("smoke trail"));
				MetaData->SetValue(NewProp_ImpactTemplate, TEXT("Category"), TEXT("Effects"));
				MetaData->SetValue(NewProp_ImpactTemplate, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
				MetaData->SetValue(NewProp_ImpactTemplate, TEXT("ToolTip"), TEXT("impact effects"));
				MetaData->SetValue(NewProp_InstantConfig, TEXT("Category"), TEXT("Config"));
				MetaData->SetValue(NewProp_InstantConfig, TEXT("ModuleRelativePath"), TEXT("Public/Weapons/ShooterWeapon_Instant.h"));
				MetaData->SetValue(NewProp_InstantConfig, TEXT("ToolTip"), TEXT("weapon config"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AShooterWeapon_Instant(Z_Construct_UClass_AShooterWeapon_Instant, TEXT("AShooterWeapon_Instant"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AShooterWeapon_Instant);
	UClass* Z_Construct_UClass_USoundNodeLocalPlayer_NoRegister()
	{
		return USoundNodeLocalPlayer::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundNodeLocalPlayer()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USoundNode();
			Z_Construct_UPackage_ShooterGame();
			OuterClass = USoundNodeLocalPlayer::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20001080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object Object"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Sound/SoundNodeLocalPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Sound/SoundNodeLocalPlayer.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Choose different branch for sounds attached to locally controlled player"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundNodeLocalPlayer(Z_Construct_UClass_USoundNodeLocalPlayer, TEXT("USoundNodeLocalPlayer"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundNodeLocalPlayer);
	UPackage* Z_Construct_UPackage_ShooterGame()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/ShooterGame")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x89FDF855;
			Guid.B = 0xF3DF35AF;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
